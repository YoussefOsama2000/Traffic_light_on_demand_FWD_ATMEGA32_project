
traffic_light_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800060  00800060  00000e5e  2**0
                  ALLOC
  2 .stab         00001efc  00000000  00000000  00000e60  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001cd3  00000000  00000000  00002d5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 aa 02 	jmp	0x554	; 0x554 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <main>
  74:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <test_LED_mudule>:
/*this part of code will test led module by trying to turn on led at pin 1 port A*/
#include "../HAL/led_module/led.h"
void test_LED_mudule(){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	LED_setup(1, 1);
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	61 e0       	ldi	r22, 0x01	; 1
  88:	0e 94 bc 06 	call	0xd78	; 0xd78 <LED_setup>
	LED_control(1, 1, LED_TURN_ON);
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	61 e0       	ldi	r22, 0x01	; 1
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
}
  96:	cf 91       	pop	r28
  98:	df 91       	pop	r29
  9a:	08 95       	ret

0000009c <test_PUSHBUTTON_callback>:



/*this part of code will test push button module by trying to turn on led when button is pressed*/
#include "../HAL/push_button_module/pushButton.h"
void test_PUSHBUTTON_callback(){
  9c:	df 93       	push	r29
  9e:	cf 93       	push	r28
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
	test_LED_mudule();
  a4:	0e 94 3e 00 	call	0x7c	; 0x7c <test_LED_mudule>
}
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	08 95       	ret

000000ae <test_PUSHBUTTON_module>:
void test_PUSHBUTTON_module(){
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	/*Initializing push button at rising edge event*/
	PUSHBUTTON_init(PUSHBUTTON_RISING);
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	0e 94 81 06 	call	0xd02	; 0xd02 <PUSHBUTTON_init>
	/*setting callback function for the button*/
	PUSHBUTTON_setISR(test_PUSHBUTTON_callback);
  bc:	8e e4       	ldi	r24, 0x4E	; 78
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 a9 06 	call	0xd52	; 0xd52 <PUSHBUTTON_setISR>
}
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	08 95       	ret

000000ca <test_TIMER1_callback>:



/*this part of code will test timer1 module by trying to turn on led when the timer is fired*/
#include "../MCAL/timer1_module/timer1.h"
void test_TIMER1_callback(){
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	test_LED_mudule();
  d2:	0e 94 3e 00 	call	0x7c	; 0x7c <test_LED_mudule>
}
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	08 95       	ret

000000dc <test_TIMER1_module>:
void test_TIMER1_module(){
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	00 d0       	rcall	.+0      	; 0xe2 <test_TIMER1_module+0x6>
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
	Timer1_setCallBack(test_TIMER1_callback);
  e6:	85 e6       	ldi	r24, 0x65	; 101
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 98 02 	call	0x530	; 0x530 <Timer1_setCallBack>
	Timer1_ConfigType* config;
	config->initial_value=0;
  ee:	e9 81       	ldd	r30, Y+1	; 0x01
  f0:	fa 81       	ldd	r31, Y+2	; 0x02
  f2:	11 82       	std	Z+1, r1	; 0x01
  f4:	10 82       	st	Z, r1
	config->compare_value=10000;
  f6:	e9 81       	ldd	r30, Y+1	; 0x01
  f8:	fa 81       	ldd	r31, Y+2	; 0x02
  fa:	80 e1       	ldi	r24, 0x10	; 16
  fc:	97 e2       	ldi	r25, 0x27	; 39
  fe:	93 83       	std	Z+3, r25	; 0x03
 100:	82 83       	std	Z+2, r24	; 0x02
	config->mode=Timer1_compareMode;
 102:	e9 81       	ldd	r30, Y+1	; 0x01
 104:	fa 81       	ldd	r31, Y+2	; 0x02
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	85 83       	std	Z+5, r24	; 0x05
	config->prescaler=Timer1_clk_256_prescaler;
 10a:	e9 81       	ldd	r30, Y+1	; 0x01
 10c:	fa 81       	ldd	r31, Y+2	; 0x02
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	84 83       	std	Z+4, r24	; 0x04
	Timer1_init(config);
 112:	89 81       	ldd	r24, Y+1	; 0x01
 114:	9a 81       	ldd	r25, Y+2	; 0x02
 116:	0e 94 25 02 	call	0x44a	; 0x44a <Timer1_init>
}
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	cf 91       	pop	r28
 120:	df 91       	pop	r29
 122:	08 95       	ret

00000124 <application>:
error_handling carsWillMove(void);
/****************************global variables**************************************************/
unsigned int g_tickCounter=0;
unsigned char g_button_pressed=0;
/****************************functions definitions**************************************************/
void application(void){
 124:	df 93       	push	r29
 126:	cf 93       	push	r28
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
initializeSystem();
 12c:	0e 94 9b 00 	call	0x136	; 0x136 <initializeSystem>
while(1){
carsNormalMode();
 130:	0e 94 f6 00 	call	0x1ec	; 0x1ec <carsNormalMode>
 134:	fd cf       	rjmp	.-6      	; 0x130 <application+0xc>

00000136 <initializeSystem>:
}
}
void initializeSystem(void){
 136:	df 93       	push	r29
 138:	cf 93       	push	r28
 13a:	00 d0       	rcall	.+0      	; 0x13c <initializeSystem+0x6>
 13c:	00 d0       	rcall	.+0      	; 0x13e <initializeSystem+0x8>
 13e:	00 d0       	rcall	.+0      	; 0x140 <initializeSystem+0xa>
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
/*initialization of bush button*/
	PUSHBUTTON_init(PUSHBUTTON_RISING);
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	0e 94 81 06 	call	0xd02	; 0xd02 <PUSHBUTTON_init>
	PUSHBUTTON_setISR(pushButtonFunction);
 14a:	8c ed       	ldi	r24, 0xDC	; 220
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 a9 06 	call	0xd52	; 0xd52 <PUSHBUTTON_setISR>
/*initialization of LEDS and turning them off*/
	 LED_setup(carsPort,carsGreenPin);
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	0e 94 bc 06 	call	0xd78	; 0xd78 <LED_setup>
	 LED_setup(carsPort,carsYellowPin);
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	0e 94 bc 06 	call	0xd78	; 0xd78 <LED_setup>
	 LED_setup(carsPort,carsRedPin);
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	62 e0       	ldi	r22, 0x02	; 2
 166:	0e 94 bc 06 	call	0xd78	; 0xd78 <LED_setup>
	 LED_setup(pedestriansPort,pedestriansGreenPin);
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	0e 94 bc 06 	call	0xd78	; 0xd78 <LED_setup>
	 LED_setup(pedestriansPort,pedestriansGreenPin);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	0e 94 bc 06 	call	0xd78	; 0xd78 <LED_setup>
	 LED_setup(pedestriansPort,pedestriansGreenPin);
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	0e 94 bc 06 	call	0xd78	; 0xd78 <LED_setup>
/*initializing timer*/
	{
		Timer1_ConfigType config;
		config.mode=Timer1_compareMode;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	8e 83       	std	Y+6, r24	; 0x06
		config.initial_value=0;
 186:	1a 82       	std	Y+2, r1	; 0x02
 188:	19 82       	std	Y+1, r1	; 0x01
		/*this values will make timer fire every 0.5 second*/
		config.compare_value=15625/4;
 18a:	82 e4       	ldi	r24, 0x42	; 66
 18c:	9f e0       	ldi	r25, 0x0F	; 15
 18e:	9c 83       	std	Y+4, r25	; 0x04
 190:	8b 83       	std	Y+3, r24	; 0x03
		config.prescaler=Timer1_clk_1024_prescaler;
 192:	85 e0       	ldi	r24, 0x05	; 5
 194:	8d 83       	std	Y+5, r24	; 0x05
		Timer1_setCallBack(timerFunction);
 196:	86 ee       	ldi	r24, 0xE6	; 230
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 98 02 	call	0x530	; 0x530 <Timer1_setCallBack>
		Timer1_init(&config);
 19e:	ce 01       	movw	r24, r28
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	0e 94 25 02 	call	0x44a	; 0x44a <Timer1_init>
	}
}
 1a6:	26 96       	adiw	r28, 0x06	; 6
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	f8 94       	cli
 1ac:	de bf       	out	0x3e, r29	; 62
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	cd bf       	out	0x3d, r28	; 61
 1b2:	cf 91       	pop	r28
 1b4:	df 91       	pop	r29
 1b6:	08 95       	ret

000001b8 <pushButtonFunction>:
/*this function will be the callback of button interrupt*/
void pushButtonFunction(void){
 1b8:	df 93       	push	r29
 1ba:	cf 93       	push	r28
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
g_button_pressed=1;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 62 00 	sts	0x0062, r24
}
 1c6:	cf 91       	pop	r28
 1c8:	df 91       	pop	r29
 1ca:	08 95       	ret

000001cc <timerFunction>:
/*this function will be the callback of timer 1 interrupt*/
void timerFunction(void){
 1cc:	df 93       	push	r29
 1ce:	cf 93       	push	r28
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
g_tickCounter++;
 1d4:	80 91 60 00 	lds	r24, 0x0060
 1d8:	90 91 61 00 	lds	r25, 0x0061
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	90 93 61 00 	sts	0x0061, r25
 1e2:	80 93 60 00 	sts	0x0060, r24
}
 1e6:	cf 91       	pop	r28
 1e8:	df 91       	pop	r29
 1ea:	08 95       	ret

000001ec <carsNormalMode>:
/*this function will handle the transition between each state*/
error_handling carsNormalMode(void){
 1ec:	df 93       	push	r29
 1ee:	cf 93       	push	r28
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
carsMove();
 1f4:	0e 94 06 01 	call	0x20c	; 0x20c <carsMove>
carsWillStop();
 1f8:	0e 94 45 01 	call	0x28a	; 0x28a <carsWillStop>
carsStop();
 1fc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <carsStop>
carsWillMove();
 200:	0e 94 96 01 	call	0x32c	; 0x32c <carsWillMove>
return _done;
 204:	81 e0       	ldi	r24, 0x01	; 1
}
 206:	cf 91       	pop	r28
 208:	df 91       	pop	r29
 20a:	08 95       	ret

0000020c <carsMove>:
/*this function handle car moving state
 * cars green lights are on
 * pedestrians red lights are on
 * all other lights are off*/
error_handling carsMove(void){
 20c:	df 93       	push	r29
 20e:	cf 93       	push	r28
 210:	0f 92       	push	r0
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
	/*Cars move*/
	LED_control(carsPort,carsGreenPin,LED_TURN_ON);
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	41 e0       	ldi	r20, 0x01	; 1
 21c:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	LED_control(carsPort,carsYellowPin,LED_TURN_OFF);
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	LED_control(carsPort,carsRedPin,LED_TURN_OFF);
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	62 e0       	ldi	r22, 0x02	; 2
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	/*pedestrian stop*/
	LED_control(pedestriansPort,pedestriansGreenPin,LED_TURN_OFF);
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	LED_control(pedestriansPort,pedestriansYellowPin,LED_TURN_OFF);
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	LED_control(pedestriansPort,pedestriansRedPin,LED_TURN_ON);
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	62 e0       	ldi	r22, 0x02	; 2
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
 252:	07 c0       	rjmp	.+14     	; 0x262 <carsMove+0x56>
	while(g_tickCounter<10){
		if(g_button_pressed==1)
 254:	80 91 62 00 	lds	r24, 0x0062
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	19 f4       	brne	.+6      	; 0x262 <carsMove+0x56>
			return _done;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	89 83       	std	Y+1, r24	; 0x01
 260:	0f c0       	rjmp	.+30     	; 0x280 <carsMove+0x74>
	LED_control(carsPort,carsRedPin,LED_TURN_OFF);
	/*pedestrian stop*/
	LED_control(pedestriansPort,pedestriansGreenPin,LED_TURN_OFF);
	LED_control(pedestriansPort,pedestriansYellowPin,LED_TURN_OFF);
	LED_control(pedestriansPort,pedestriansRedPin,LED_TURN_ON);
	while(g_tickCounter<10){
 262:	80 91 60 00 	lds	r24, 0x0060
 266:	90 91 61 00 	lds	r25, 0x0061
 26a:	8a 30       	cpi	r24, 0x0A	; 10
 26c:	91 05       	cpc	r25, r1
 26e:	90 f3       	brcs	.-28     	; 0x254 <carsMove+0x48>
		if(g_button_pressed==1)
			return _done;
	}
	g_tickCounter=0;
 270:	10 92 61 00 	sts	0x0061, r1
 274:	10 92 60 00 	sts	0x0060, r1
	g_button_pressed=0;
 278:	10 92 62 00 	sts	0x0062, r1
	return _done;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	89 81       	ldd	r24, Y+1	; 0x01
}
 282:	0f 90       	pop	r0
 284:	cf 91       	pop	r28
 286:	df 91       	pop	r29
 288:	08 95       	ret

0000028a <carsWillStop>:
/*this function handle cars will stop state
 * it flashes yellow lights of cars and pedestrians
 * all other lights are turned off
 * */
error_handling carsWillStop(void){
 28a:	df 93       	push	r29
 28c:	cf 93       	push	r28
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
	/*Cars will stop*/
	LED_control(carsPort,carsGreenPin,LED_TURN_OFF);
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	LED_control(carsPort,carsYellowPin,LED_TURN_ON);
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	41 e0       	ldi	r20, 0x01	; 1
 2a2:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	LED_control(carsPort,carsRedPin,LED_TURN_OFF);
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	62 e0       	ldi	r22, 0x02	; 2
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	/*pedestrian will move*/
	LED_control(pedestriansPort,pedestriansGreenPin,LED_TURN_OFF);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	LED_control(pedestriansPort,pedestriansYellowPin,LED_TURN_ON);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	LED_control(pedestriansPort,pedestriansRedPin,LED_TURN_ON);
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	62 e0       	ldi	r22, 0x02	; 2
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
 2ce:	1d c0       	rjmp	.+58     	; 0x30a <carsWillStop+0x80>
	while(g_tickCounter<10){
		if(g_tickCounter%2)
 2d0:	80 91 60 00 	lds	r24, 0x0060
 2d4:	90 91 61 00 	lds	r25, 0x0061
 2d8:	81 70       	andi	r24, 0x01	; 1
 2da:	90 70       	andi	r25, 0x00	; 0
 2dc:	88 23       	and	r24, r24
 2de:	59 f0       	breq	.+22     	; 0x2f6 <carsWillStop+0x6c>
		{
			LED_control(carsPort,carsYellowPin,LED_TURN_ON);
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
			LED_control(pedestriansPort,pedestriansYellowPin,LED_TURN_ON);
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	41 e0       	ldi	r20, 0x01	; 1
 2f0:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
 2f4:	0a c0       	rjmp	.+20     	; 0x30a <carsWillStop+0x80>
		}else
		{
			LED_control(carsPort,carsYellowPin,LED_TURN_OFF);
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
			LED_control(pedestriansPort,pedestriansYellowPin,LED_TURN_OFF);
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	LED_control(carsPort,carsRedPin,LED_TURN_OFF);
	/*pedestrian will move*/
	LED_control(pedestriansPort,pedestriansGreenPin,LED_TURN_OFF);
	LED_control(pedestriansPort,pedestriansYellowPin,LED_TURN_ON);
	LED_control(pedestriansPort,pedestriansRedPin,LED_TURN_ON);
	while(g_tickCounter<10){
 30a:	80 91 60 00 	lds	r24, 0x0060
 30e:	90 91 61 00 	lds	r25, 0x0061
 312:	8a 30       	cpi	r24, 0x0A	; 10
 314:	91 05       	cpc	r25, r1
 316:	e0 f2       	brcs	.-72     	; 0x2d0 <carsWillStop+0x46>
		{
			LED_control(carsPort,carsYellowPin,LED_TURN_OFF);
			LED_control(pedestriansPort,pedestriansYellowPin,LED_TURN_OFF);
		}
	}
	g_button_pressed=0;
 318:	10 92 62 00 	sts	0x0062, r1
	g_tickCounter=0;
 31c:	10 92 61 00 	sts	0x0061, r1
 320:	10 92 60 00 	sts	0x0060, r1
	return _done;
 324:	81 e0       	ldi	r24, 0x01	; 1
}
 326:	cf 91       	pop	r28
 328:	df 91       	pop	r29
 32a:	08 95       	ret

0000032c <carsWillMove>:
/*this function handle cars will move state
 * it flashes yellow lights of cars and pedestrians
 * all other lights are turned off
 * */
error_handling carsWillMove(void){
 32c:	df 93       	push	r29
 32e:	cf 93       	push	r28
 330:	0f 92       	push	r0
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
	/*Cars will stop*/
	LED_control(carsPort,carsGreenPin,LED_TURN_OFF);
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	40 e0       	ldi	r20, 0x00	; 0
 33c:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	LED_control(carsPort,carsYellowPin,LED_TURN_ON);
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	41 e0       	ldi	r20, 0x01	; 1
 346:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	LED_control(carsPort,carsRedPin,LED_TURN_OFF);
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	62 e0       	ldi	r22, 0x02	; 2
 34e:	40 e0       	ldi	r20, 0x00	; 0
 350:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	/*pedestrian will move*/
	LED_control(pedestriansPort,pedestriansGreenPin,LED_TURN_OFF);
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	LED_control(pedestriansPort,pedestriansYellowPin,LED_TURN_ON);
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	LED_control(pedestriansPort,pedestriansRedPin,LED_TURN_ON);
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	62 e0       	ldi	r22, 0x02	; 2
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
 372:	24 c0       	rjmp	.+72     	; 0x3bc <carsWillMove+0x90>

	while(g_tickCounter<10){
		if(g_tickCounter%2)
 374:	80 91 60 00 	lds	r24, 0x0060
 378:	90 91 61 00 	lds	r25, 0x0061
 37c:	81 70       	andi	r24, 0x01	; 1
 37e:	90 70       	andi	r25, 0x00	; 0
 380:	88 23       	and	r24, r24
 382:	59 f0       	breq	.+22     	; 0x39a <carsWillMove+0x6e>
		{
			LED_control(carsPort,carsYellowPin,LED_TURN_ON);
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
			LED_control(pedestriansPort,pedestriansYellowPin,LED_TURN_ON);
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	61 e0       	ldi	r22, 0x01	; 1
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
 398:	0a c0       	rjmp	.+20     	; 0x3ae <carsWillMove+0x82>
		}else
		{
			LED_control(carsPort,carsYellowPin,LED_TURN_OFF);
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
			LED_control(pedestriansPort,pedestriansYellowPin,LED_TURN_OFF);
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
		}
		if(g_button_pressed==1)
 3ae:	80 91 62 00 	lds	r24, 0x0062
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	19 f4       	brne	.+6      	; 0x3bc <carsWillMove+0x90>
			return _done;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	89 83       	std	Y+1, r24	; 0x01
 3ba:	0f c0       	rjmp	.+30     	; 0x3da <carsWillMove+0xae>
	/*pedestrian will move*/
	LED_control(pedestriansPort,pedestriansGreenPin,LED_TURN_OFF);
	LED_control(pedestriansPort,pedestriansYellowPin,LED_TURN_ON);
	LED_control(pedestriansPort,pedestriansRedPin,LED_TURN_ON);

	while(g_tickCounter<10){
 3bc:	80 91 60 00 	lds	r24, 0x0060
 3c0:	90 91 61 00 	lds	r25, 0x0061
 3c4:	8a 30       	cpi	r24, 0x0A	; 10
 3c6:	91 05       	cpc	r25, r1
 3c8:	a8 f2       	brcs	.-86     	; 0x374 <carsWillMove+0x48>
			LED_control(pedestriansPort,pedestriansYellowPin,LED_TURN_OFF);
		}
		if(g_button_pressed==1)
			return _done;
	}
	g_button_pressed=0;
 3ca:	10 92 62 00 	sts	0x0062, r1
	g_tickCounter=0;
 3ce:	10 92 61 00 	sts	0x0061, r1
 3d2:	10 92 60 00 	sts	0x0060, r1
	return _done;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	89 83       	std	Y+1, r24	; 0x01
 3da:	89 81       	ldd	r24, Y+1	; 0x01
}
 3dc:	0f 90       	pop	r0
 3de:	cf 91       	pop	r28
 3e0:	df 91       	pop	r29
 3e2:	08 95       	ret

000003e4 <carsStop>:
/*this function handle car stop state
 * cars red lights are on
 * pedestrians green lights are on
 * all other lights are turned off
 * */
error_handling carsStop(void){
 3e4:	df 93       	push	r29
 3e6:	cf 93       	push	r28
 3e8:	cd b7       	in	r28, 0x3d	; 61
 3ea:	de b7       	in	r29, 0x3e	; 62
	/*Cars stop*/
	LED_control(carsPort,carsGreenPin,LED_TURN_OFF);
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	40 e0       	ldi	r20, 0x00	; 0
 3f2:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	LED_control(carsPort,carsYellowPin,LED_TURN_OFF);
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	61 e0       	ldi	r22, 0x01	; 1
 3fa:	40 e0       	ldi	r20, 0x00	; 0
 3fc:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	LED_control(carsPort,carsRedPin,LED_TURN_ON);
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	62 e0       	ldi	r22, 0x02	; 2
 404:	41 e0       	ldi	r20, 0x01	; 1
 406:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>

	/*pedestrian cross*/
	LED_control(pedestriansPort,pedestriansGreenPin,LED_TURN_ON);
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	41 e0       	ldi	r20, 0x01	; 1
 410:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	LED_control(pedestriansPort,pedestriansYellowPin,LED_TURN_OFF);
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	LED_control(pedestriansPort,pedestriansRedPin,LED_TURN_OFF);
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	62 e0       	ldi	r22, 0x02	; 2
 422:	40 e0       	ldi	r20, 0x00	; 0
 424:	0e 94 d3 06 	call	0xda6	; 0xda6 <LED_control>
	/*no action will be taken if button pressed pedestrians was just crossing*/
	while(g_tickCounter<10){}
 428:	80 91 60 00 	lds	r24, 0x0060
 42c:	90 91 61 00 	lds	r25, 0x0061
 430:	8a 30       	cpi	r24, 0x0A	; 10
 432:	91 05       	cpc	r25, r1
 434:	c8 f3       	brcs	.-14     	; 0x428 <carsStop+0x44>
	g_button_pressed=0;
 436:	10 92 62 00 	sts	0x0062, r1
	g_tickCounter=0;
 43a:	10 92 61 00 	sts	0x0061, r1
 43e:	10 92 60 00 	sts	0x0060, r1
	return _done;
 442:	81 e0       	ldi	r24, 0x01	; 1
}
 444:	cf 91       	pop	r28
 446:	df 91       	pop	r29
 448:	08 95       	ret

0000044a <Timer1_init>:

static void (*callback) (void)=NULL_PTR;
/*this function initialize timer 1
 * configuration has initial value , compare value , pre-scaler ,operation mode
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
 44a:	df 93       	push	r29
 44c:	cf 93       	push	r28
 44e:	00 d0       	rcall	.+0      	; 0x450 <Timer1_init+0x6>
 450:	cd b7       	in	r28, 0x3d	; 61
 452:	de b7       	in	r29, 0x3e	; 62
 454:	9a 83       	std	Y+2, r25	; 0x02
 456:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Enabling global interrupt
	 */
	SET_BIT(SREG,SPIE);
 458:	af e5       	ldi	r26, 0x5F	; 95
 45a:	b0 e0       	ldi	r27, 0x00	; 0
 45c:	ef e5       	ldi	r30, 0x5F	; 95
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	80 68       	ori	r24, 0x80	; 128
 464:	8c 93       	st	X, r24
	/*
	 * enabling interrupt (overflow or compare)
	 */
	if(Config_Ptr->mode==Timer1_compareMode)
 466:	e9 81       	ldd	r30, Y+1	; 0x01
 468:	fa 81       	ldd	r31, Y+2	; 0x02
 46a:	85 81       	ldd	r24, Z+5	; 0x05
 46c:	81 30       	cpi	r24, 0x01	; 1
 46e:	49 f4       	brne	.+18     	; 0x482 <Timer1_init+0x38>
	TIMSK=(TIMSK&(~0x30))|(1<<OCIE1A);
 470:	a9 e5       	ldi	r26, 0x59	; 89
 472:	b0 e0       	ldi	r27, 0x00	; 0
 474:	e9 e5       	ldi	r30, 0x59	; 89
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	8f 7c       	andi	r24, 0xCF	; 207
 47c:	80 61       	ori	r24, 0x10	; 16
 47e:	8c 93       	st	X, r24
 480:	08 c0       	rjmp	.+16     	; 0x492 <Timer1_init+0x48>
	else TIMSK=(TIMSK&(~0x30))|(1<<TOIE1);
 482:	a9 e5       	ldi	r26, 0x59	; 89
 484:	b0 e0       	ldi	r27, 0x00	; 0
 486:	e9 e5       	ldi	r30, 0x59	; 89
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	8b 7c       	andi	r24, 0xCB	; 203
 48e:	84 60       	ori	r24, 0x04	; 4
 490:	8c 93       	st	X, r24
	/*
	 * setting timer initial value
	 */
	TCNT1=Config_Ptr->initial_value;
 492:	ac e4       	ldi	r26, 0x4C	; 76
 494:	b0 e0       	ldi	r27, 0x00	; 0
 496:	e9 81       	ldd	r30, Y+1	; 0x01
 498:	fa 81       	ldd	r31, Y+2	; 0x02
 49a:	80 81       	ld	r24, Z
 49c:	91 81       	ldd	r25, Z+1	; 0x01
 49e:	11 96       	adiw	r26, 0x01	; 1
 4a0:	9c 93       	st	X, r25
 4a2:	8e 93       	st	-X, r24
	TCCR1A = (1<<FOC1A)| (1<<FOC1B);
 4a4:	ef e4       	ldi	r30, 0x4F	; 79
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	8c e0       	ldi	r24, 0x0C	; 12
 4aa:	80 83       	st	Z, r24
	/*
	 * choosing operation mode
	 */
	TCCR1B = (TCCR1B&(~(1<<WGM12)))|(Config_Ptr->mode<<WGM12);
 4ac:	ae e4       	ldi	r26, 0x4E	; 78
 4ae:	b0 e0       	ldi	r27, 0x00	; 0
 4b0:	ee e4       	ldi	r30, 0x4E	; 78
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	28 2f       	mov	r18, r24
 4b8:	27 7f       	andi	r18, 0xF7	; 247
 4ba:	e9 81       	ldd	r30, Y+1	; 0x01
 4bc:	fa 81       	ldd	r31, Y+2	; 0x02
 4be:	85 81       	ldd	r24, Z+5	; 0x05
 4c0:	88 2f       	mov	r24, r24
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	82 2b       	or	r24, r18
 4d2:	8c 93       	st	X, r24
	/*
	 * setting compare value if in compare mode
	 */
	if(Config_Ptr->mode==Timer1_compareMode){
 4d4:	e9 81       	ldd	r30, Y+1	; 0x01
 4d6:	fa 81       	ldd	r31, Y+2	; 0x02
 4d8:	85 81       	ldd	r24, Z+5	; 0x05
 4da:	81 30       	cpi	r24, 0x01	; 1
 4dc:	51 f4       	brne	.+20     	; 0x4f2 <Timer1_init+0xa8>
		OCR1A=Config_Ptr->compare_value;
 4de:	ea e4       	ldi	r30, 0x4A	; 74
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	a9 81       	ldd	r26, Y+1	; 0x01
 4e4:	ba 81       	ldd	r27, Y+2	; 0x02
 4e6:	12 96       	adiw	r26, 0x02	; 2
 4e8:	8d 91       	ld	r24, X+
 4ea:	9c 91       	ld	r25, X
 4ec:	13 97       	sbiw	r26, 0x03	; 3
 4ee:	91 83       	std	Z+1, r25	; 0x01
 4f0:	80 83       	st	Z, r24
	}
	/*
	 * setting pre-scaler
	 */
	TCCR1B = (TCCR1B&(~((1<<CS12)|(1<<CS11)|(1<<CS10))))|(Config_Ptr->prescaler);
 4f2:	ae e4       	ldi	r26, 0x4E	; 78
 4f4:	b0 e0       	ldi	r27, 0x00	; 0
 4f6:	ee e4       	ldi	r30, 0x4E	; 78
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	80 81       	ld	r24, Z
 4fc:	98 2f       	mov	r25, r24
 4fe:	98 7f       	andi	r25, 0xF8	; 248
 500:	e9 81       	ldd	r30, Y+1	; 0x01
 502:	fa 81       	ldd	r31, Y+2	; 0x02
 504:	84 81       	ldd	r24, Z+4	; 0x04
 506:	89 2b       	or	r24, r25
 508:	8c 93       	st	X, r24

}
 50a:	0f 90       	pop	r0
 50c:	0f 90       	pop	r0
 50e:	cf 91       	pop	r28
 510:	df 91       	pop	r29
 512:	08 95       	ret

00000514 <Timer1_deInit>:
/*
 * this function is made to de-initialze timer 1
 */
void Timer1_deInit(void){
 514:	df 93       	push	r29
 516:	cf 93       	push	r28
 518:	cd b7       	in	r28, 0x3d	; 61
 51a:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = TCCR1B&(~((1<<CS12)|(1<<CS11)|(1<<CS10)));
 51c:	ae e4       	ldi	r26, 0x4E	; 78
 51e:	b0 e0       	ldi	r27, 0x00	; 0
 520:	ee e4       	ldi	r30, 0x4E	; 78
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	88 7f       	andi	r24, 0xF8	; 248
 528:	8c 93       	st	X, r24
}
 52a:	cf 91       	pop	r28
 52c:	df 91       	pop	r29
 52e:	08 95       	ret

00000530 <Timer1_setCallBack>:
/*
 * this function is made to set the callback that will be called when timer fire
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
 530:	df 93       	push	r29
 532:	cf 93       	push	r28
 534:	00 d0       	rcall	.+0      	; 0x536 <Timer1_setCallBack+0x6>
 536:	cd b7       	in	r28, 0x3d	; 61
 538:	de b7       	in	r29, 0x3e	; 62
 53a:	9a 83       	std	Y+2, r25	; 0x02
 53c:	89 83       	std	Y+1, r24	; 0x01
	callback=a_ptr;
 53e:	89 81       	ldd	r24, Y+1	; 0x01
 540:	9a 81       	ldd	r25, Y+2	; 0x02
 542:	90 93 64 00 	sts	0x0064, r25
 546:	80 93 63 00 	sts	0x0063, r24
}
 54a:	0f 90       	pop	r0
 54c:	0f 90       	pop	r0
 54e:	cf 91       	pop	r28
 550:	df 91       	pop	r29
 552:	08 95       	ret

00000554 <__vector_7>:
ISR(TIMER1_COMPA_vect){
 554:	1f 92       	push	r1
 556:	0f 92       	push	r0
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	0f 92       	push	r0
 55c:	11 24       	eor	r1, r1
 55e:	2f 93       	push	r18
 560:	3f 93       	push	r19
 562:	4f 93       	push	r20
 564:	5f 93       	push	r21
 566:	6f 93       	push	r22
 568:	7f 93       	push	r23
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
 56e:	af 93       	push	r26
 570:	bf 93       	push	r27
 572:	ef 93       	push	r30
 574:	ff 93       	push	r31
 576:	df 93       	push	r29
 578:	cf 93       	push	r28
 57a:	cd b7       	in	r28, 0x3d	; 61
 57c:	de b7       	in	r29, 0x3e	; 62
	if(callback!=NULL_PTR)
 57e:	80 91 63 00 	lds	r24, 0x0063
 582:	90 91 64 00 	lds	r25, 0x0064
 586:	00 97       	sbiw	r24, 0x00	; 0
 588:	29 f0       	breq	.+10     	; 0x594 <__vector_7+0x40>
	{
	callback();
 58a:	e0 91 63 00 	lds	r30, 0x0063
 58e:	f0 91 64 00 	lds	r31, 0x0064
 592:	09 95       	icall
	}
}
 594:	cf 91       	pop	r28
 596:	df 91       	pop	r29
 598:	ff 91       	pop	r31
 59a:	ef 91       	pop	r30
 59c:	bf 91       	pop	r27
 59e:	af 91       	pop	r26
 5a0:	9f 91       	pop	r25
 5a2:	8f 91       	pop	r24
 5a4:	7f 91       	pop	r23
 5a6:	6f 91       	pop	r22
 5a8:	5f 91       	pop	r21
 5aa:	4f 91       	pop	r20
 5ac:	3f 91       	pop	r19
 5ae:	2f 91       	pop	r18
 5b0:	0f 90       	pop	r0
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	0f 90       	pop	r0
 5b6:	1f 90       	pop	r1
 5b8:	18 95       	reti

000005ba <__vector_9>:
ISR(TIMER1_OVF_vect){
 5ba:	1f 92       	push	r1
 5bc:	0f 92       	push	r0
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	0f 92       	push	r0
 5c2:	11 24       	eor	r1, r1
 5c4:	2f 93       	push	r18
 5c6:	3f 93       	push	r19
 5c8:	4f 93       	push	r20
 5ca:	5f 93       	push	r21
 5cc:	6f 93       	push	r22
 5ce:	7f 93       	push	r23
 5d0:	8f 93       	push	r24
 5d2:	9f 93       	push	r25
 5d4:	af 93       	push	r26
 5d6:	bf 93       	push	r27
 5d8:	ef 93       	push	r30
 5da:	ff 93       	push	r31
 5dc:	df 93       	push	r29
 5de:	cf 93       	push	r28
 5e0:	cd b7       	in	r28, 0x3d	; 61
 5e2:	de b7       	in	r29, 0x3e	; 62
	if(callback!=NULL_PTR)
 5e4:	80 91 63 00 	lds	r24, 0x0063
 5e8:	90 91 64 00 	lds	r25, 0x0064
 5ec:	00 97       	sbiw	r24, 0x00	; 0
 5ee:	29 f0       	breq	.+10     	; 0x5fa <__vector_9+0x40>
		{
		callback();
 5f0:	e0 91 63 00 	lds	r30, 0x0063
 5f4:	f0 91 64 00 	lds	r31, 0x0064
 5f8:	09 95       	icall
		}
}
 5fa:	cf 91       	pop	r28
 5fc:	df 91       	pop	r29
 5fe:	ff 91       	pop	r31
 600:	ef 91       	pop	r30
 602:	bf 91       	pop	r27
 604:	af 91       	pop	r26
 606:	9f 91       	pop	r25
 608:	8f 91       	pop	r24
 60a:	7f 91       	pop	r23
 60c:	6f 91       	pop	r22
 60e:	5f 91       	pop	r21
 610:	4f 91       	pop	r20
 612:	3f 91       	pop	r19
 614:	2f 91       	pop	r18
 616:	0f 90       	pop	r0
 618:	0f be       	out	0x3f, r0	; 63
 61a:	0f 90       	pop	r0
 61c:	1f 90       	pop	r1
 61e:	18 95       	reti

00000620 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
 620:	df 93       	push	r29
 622:	cf 93       	push	r28
 624:	00 d0       	rcall	.+0      	; 0x626 <GPIO_setupPinDirection+0x6>
 626:	00 d0       	rcall	.+0      	; 0x628 <GPIO_setupPinDirection+0x8>
 628:	0f 92       	push	r0
 62a:	cd b7       	in	r28, 0x3d	; 61
 62c:	de b7       	in	r29, 0x3e	; 62
 62e:	89 83       	std	Y+1, r24	; 0x01
 630:	6a 83       	std	Y+2, r22	; 0x02
 632:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 634:	8a 81       	ldd	r24, Y+2	; 0x02
 636:	88 30       	cpi	r24, 0x08	; 8
 638:	08 f0       	brcs	.+2      	; 0x63c <GPIO_setupPinDirection+0x1c>
 63a:	d5 c0       	rjmp	.+426    	; 0x7e6 <GPIO_setupPinDirection+0x1c6>
 63c:	89 81       	ldd	r24, Y+1	; 0x01
 63e:	84 30       	cpi	r24, 0x04	; 4
 640:	08 f0       	brcs	.+2      	; 0x644 <GPIO_setupPinDirection+0x24>
 642:	d1 c0       	rjmp	.+418    	; 0x7e6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
 644:	89 81       	ldd	r24, Y+1	; 0x01
 646:	28 2f       	mov	r18, r24
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	3d 83       	std	Y+5, r19	; 0x05
 64c:	2c 83       	std	Y+4, r18	; 0x04
 64e:	8c 81       	ldd	r24, Y+4	; 0x04
 650:	9d 81       	ldd	r25, Y+5	; 0x05
 652:	81 30       	cpi	r24, 0x01	; 1
 654:	91 05       	cpc	r25, r1
 656:	09 f4       	brne	.+2      	; 0x65a <GPIO_setupPinDirection+0x3a>
 658:	43 c0       	rjmp	.+134    	; 0x6e0 <GPIO_setupPinDirection+0xc0>
 65a:	2c 81       	ldd	r18, Y+4	; 0x04
 65c:	3d 81       	ldd	r19, Y+5	; 0x05
 65e:	22 30       	cpi	r18, 0x02	; 2
 660:	31 05       	cpc	r19, r1
 662:	2c f4       	brge	.+10     	; 0x66e <GPIO_setupPinDirection+0x4e>
 664:	8c 81       	ldd	r24, Y+4	; 0x04
 666:	9d 81       	ldd	r25, Y+5	; 0x05
 668:	00 97       	sbiw	r24, 0x00	; 0
 66a:	71 f0       	breq	.+28     	; 0x688 <GPIO_setupPinDirection+0x68>
 66c:	bc c0       	rjmp	.+376    	; 0x7e6 <GPIO_setupPinDirection+0x1c6>
 66e:	2c 81       	ldd	r18, Y+4	; 0x04
 670:	3d 81       	ldd	r19, Y+5	; 0x05
 672:	22 30       	cpi	r18, 0x02	; 2
 674:	31 05       	cpc	r19, r1
 676:	09 f4       	brne	.+2      	; 0x67a <GPIO_setupPinDirection+0x5a>
 678:	5f c0       	rjmp	.+190    	; 0x738 <GPIO_setupPinDirection+0x118>
 67a:	8c 81       	ldd	r24, Y+4	; 0x04
 67c:	9d 81       	ldd	r25, Y+5	; 0x05
 67e:	83 30       	cpi	r24, 0x03	; 3
 680:	91 05       	cpc	r25, r1
 682:	09 f4       	brne	.+2      	; 0x686 <GPIO_setupPinDirection+0x66>
 684:	85 c0       	rjmp	.+266    	; 0x790 <GPIO_setupPinDirection+0x170>
 686:	af c0       	rjmp	.+350    	; 0x7e6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
 688:	8b 81       	ldd	r24, Y+3	; 0x03
 68a:	81 30       	cpi	r24, 0x01	; 1
 68c:	a1 f4       	brne	.+40     	; 0x6b6 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
 68e:	aa e3       	ldi	r26, 0x3A	; 58
 690:	b0 e0       	ldi	r27, 0x00	; 0
 692:	ea e3       	ldi	r30, 0x3A	; 58
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	80 81       	ld	r24, Z
 698:	48 2f       	mov	r20, r24
 69a:	8a 81       	ldd	r24, Y+2	; 0x02
 69c:	28 2f       	mov	r18, r24
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	02 2e       	mov	r0, r18
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <GPIO_setupPinDirection+0x8c>
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	0a 94       	dec	r0
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <GPIO_setupPinDirection+0x88>
 6b0:	84 2b       	or	r24, r20
 6b2:	8c 93       	st	X, r24
 6b4:	98 c0       	rjmp	.+304    	; 0x7e6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 6b6:	aa e3       	ldi	r26, 0x3A	; 58
 6b8:	b0 e0       	ldi	r27, 0x00	; 0
 6ba:	ea e3       	ldi	r30, 0x3A	; 58
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	48 2f       	mov	r20, r24
 6c2:	8a 81       	ldd	r24, Y+2	; 0x02
 6c4:	28 2f       	mov	r18, r24
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	02 2e       	mov	r0, r18
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <GPIO_setupPinDirection+0xb4>
 6d0:	88 0f       	add	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	0a 94       	dec	r0
 6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <GPIO_setupPinDirection+0xb0>
 6d8:	80 95       	com	r24
 6da:	84 23       	and	r24, r20
 6dc:	8c 93       	st	X, r24
 6de:	83 c0       	rjmp	.+262    	; 0x7e6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 6e0:	8b 81       	ldd	r24, Y+3	; 0x03
 6e2:	81 30       	cpi	r24, 0x01	; 1
 6e4:	a1 f4       	brne	.+40     	; 0x70e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
 6e6:	a7 e3       	ldi	r26, 0x37	; 55
 6e8:	b0 e0       	ldi	r27, 0x00	; 0
 6ea:	e7 e3       	ldi	r30, 0x37	; 55
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	80 81       	ld	r24, Z
 6f0:	48 2f       	mov	r20, r24
 6f2:	8a 81       	ldd	r24, Y+2	; 0x02
 6f4:	28 2f       	mov	r18, r24
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	02 2e       	mov	r0, r18
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <GPIO_setupPinDirection+0xe4>
 700:	88 0f       	add	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	0a 94       	dec	r0
 706:	e2 f7       	brpl	.-8      	; 0x700 <GPIO_setupPinDirection+0xe0>
 708:	84 2b       	or	r24, r20
 70a:	8c 93       	st	X, r24
 70c:	6c c0       	rjmp	.+216    	; 0x7e6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 70e:	a7 e3       	ldi	r26, 0x37	; 55
 710:	b0 e0       	ldi	r27, 0x00	; 0
 712:	e7 e3       	ldi	r30, 0x37	; 55
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	48 2f       	mov	r20, r24
 71a:	8a 81       	ldd	r24, Y+2	; 0x02
 71c:	28 2f       	mov	r18, r24
 71e:	30 e0       	ldi	r19, 0x00	; 0
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	02 2e       	mov	r0, r18
 726:	02 c0       	rjmp	.+4      	; 0x72c <GPIO_setupPinDirection+0x10c>
 728:	88 0f       	add	r24, r24
 72a:	99 1f       	adc	r25, r25
 72c:	0a 94       	dec	r0
 72e:	e2 f7       	brpl	.-8      	; 0x728 <GPIO_setupPinDirection+0x108>
 730:	80 95       	com	r24
 732:	84 23       	and	r24, r20
 734:	8c 93       	st	X, r24
 736:	57 c0       	rjmp	.+174    	; 0x7e6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 738:	8b 81       	ldd	r24, Y+3	; 0x03
 73a:	81 30       	cpi	r24, 0x01	; 1
 73c:	a1 f4       	brne	.+40     	; 0x766 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
 73e:	a4 e3       	ldi	r26, 0x34	; 52
 740:	b0 e0       	ldi	r27, 0x00	; 0
 742:	e4 e3       	ldi	r30, 0x34	; 52
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	80 81       	ld	r24, Z
 748:	48 2f       	mov	r20, r24
 74a:	8a 81       	ldd	r24, Y+2	; 0x02
 74c:	28 2f       	mov	r18, r24
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	02 2e       	mov	r0, r18
 756:	02 c0       	rjmp	.+4      	; 0x75c <GPIO_setupPinDirection+0x13c>
 758:	88 0f       	add	r24, r24
 75a:	99 1f       	adc	r25, r25
 75c:	0a 94       	dec	r0
 75e:	e2 f7       	brpl	.-8      	; 0x758 <GPIO_setupPinDirection+0x138>
 760:	84 2b       	or	r24, r20
 762:	8c 93       	st	X, r24
 764:	40 c0       	rjmp	.+128    	; 0x7e6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 766:	a4 e3       	ldi	r26, 0x34	; 52
 768:	b0 e0       	ldi	r27, 0x00	; 0
 76a:	e4 e3       	ldi	r30, 0x34	; 52
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	80 81       	ld	r24, Z
 770:	48 2f       	mov	r20, r24
 772:	8a 81       	ldd	r24, Y+2	; 0x02
 774:	28 2f       	mov	r18, r24
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	02 2e       	mov	r0, r18
 77e:	02 c0       	rjmp	.+4      	; 0x784 <GPIO_setupPinDirection+0x164>
 780:	88 0f       	add	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	0a 94       	dec	r0
 786:	e2 f7       	brpl	.-8      	; 0x780 <GPIO_setupPinDirection+0x160>
 788:	80 95       	com	r24
 78a:	84 23       	and	r24, r20
 78c:	8c 93       	st	X, r24
 78e:	2b c0       	rjmp	.+86     	; 0x7e6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 790:	8b 81       	ldd	r24, Y+3	; 0x03
 792:	81 30       	cpi	r24, 0x01	; 1
 794:	a1 f4       	brne	.+40     	; 0x7be <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
 796:	a1 e3       	ldi	r26, 0x31	; 49
 798:	b0 e0       	ldi	r27, 0x00	; 0
 79a:	e1 e3       	ldi	r30, 0x31	; 49
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	80 81       	ld	r24, Z
 7a0:	48 2f       	mov	r20, r24
 7a2:	8a 81       	ldd	r24, Y+2	; 0x02
 7a4:	28 2f       	mov	r18, r24
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	02 2e       	mov	r0, r18
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <GPIO_setupPinDirection+0x194>
 7b0:	88 0f       	add	r24, r24
 7b2:	99 1f       	adc	r25, r25
 7b4:	0a 94       	dec	r0
 7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <GPIO_setupPinDirection+0x190>
 7b8:	84 2b       	or	r24, r20
 7ba:	8c 93       	st	X, r24
 7bc:	14 c0       	rjmp	.+40     	; 0x7e6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 7be:	a1 e3       	ldi	r26, 0x31	; 49
 7c0:	b0 e0       	ldi	r27, 0x00	; 0
 7c2:	e1 e3       	ldi	r30, 0x31	; 49
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	80 81       	ld	r24, Z
 7c8:	48 2f       	mov	r20, r24
 7ca:	8a 81       	ldd	r24, Y+2	; 0x02
 7cc:	28 2f       	mov	r18, r24
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	02 2e       	mov	r0, r18
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <GPIO_setupPinDirection+0x1bc>
 7d8:	88 0f       	add	r24, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	0a 94       	dec	r0
 7de:	e2 f7       	brpl	.-8      	; 0x7d8 <GPIO_setupPinDirection+0x1b8>
 7e0:	80 95       	com	r24
 7e2:	84 23       	and	r24, r20
 7e4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 7e6:	0f 90       	pop	r0
 7e8:	0f 90       	pop	r0
 7ea:	0f 90       	pop	r0
 7ec:	0f 90       	pop	r0
 7ee:	0f 90       	pop	r0
 7f0:	cf 91       	pop	r28
 7f2:	df 91       	pop	r29
 7f4:	08 95       	ret

000007f6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
 7f6:	df 93       	push	r29
 7f8:	cf 93       	push	r28
 7fa:	00 d0       	rcall	.+0      	; 0x7fc <GPIO_writePin+0x6>
 7fc:	00 d0       	rcall	.+0      	; 0x7fe <GPIO_writePin+0x8>
 7fe:	0f 92       	push	r0
 800:	cd b7       	in	r28, 0x3d	; 61
 802:	de b7       	in	r29, 0x3e	; 62
 804:	89 83       	std	Y+1, r24	; 0x01
 806:	6a 83       	std	Y+2, r22	; 0x02
 808:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 80a:	8a 81       	ldd	r24, Y+2	; 0x02
 80c:	88 30       	cpi	r24, 0x08	; 8
 80e:	08 f0       	brcs	.+2      	; 0x812 <GPIO_writePin+0x1c>
 810:	d5 c0       	rjmp	.+426    	; 0x9bc <__stack+0x15d>
 812:	89 81       	ldd	r24, Y+1	; 0x01
 814:	84 30       	cpi	r24, 0x04	; 4
 816:	08 f0       	brcs	.+2      	; 0x81a <GPIO_writePin+0x24>
 818:	d1 c0       	rjmp	.+418    	; 0x9bc <__stack+0x15d>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
 81a:	89 81       	ldd	r24, Y+1	; 0x01
 81c:	28 2f       	mov	r18, r24
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	3d 83       	std	Y+5, r19	; 0x05
 822:	2c 83       	std	Y+4, r18	; 0x04
 824:	8c 81       	ldd	r24, Y+4	; 0x04
 826:	9d 81       	ldd	r25, Y+5	; 0x05
 828:	81 30       	cpi	r24, 0x01	; 1
 82a:	91 05       	cpc	r25, r1
 82c:	09 f4       	brne	.+2      	; 0x830 <GPIO_writePin+0x3a>
 82e:	43 c0       	rjmp	.+134    	; 0x8b6 <__stack+0x57>
 830:	2c 81       	ldd	r18, Y+4	; 0x04
 832:	3d 81       	ldd	r19, Y+5	; 0x05
 834:	22 30       	cpi	r18, 0x02	; 2
 836:	31 05       	cpc	r19, r1
 838:	2c f4       	brge	.+10     	; 0x844 <GPIO_writePin+0x4e>
 83a:	8c 81       	ldd	r24, Y+4	; 0x04
 83c:	9d 81       	ldd	r25, Y+5	; 0x05
 83e:	00 97       	sbiw	r24, 0x00	; 0
 840:	71 f0       	breq	.+28     	; 0x85e <GPIO_writePin+0x68>
 842:	bc c0       	rjmp	.+376    	; 0x9bc <__stack+0x15d>
 844:	2c 81       	ldd	r18, Y+4	; 0x04
 846:	3d 81       	ldd	r19, Y+5	; 0x05
 848:	22 30       	cpi	r18, 0x02	; 2
 84a:	31 05       	cpc	r19, r1
 84c:	09 f4       	brne	.+2      	; 0x850 <GPIO_writePin+0x5a>
 84e:	5f c0       	rjmp	.+190    	; 0x90e <__stack+0xaf>
 850:	8c 81       	ldd	r24, Y+4	; 0x04
 852:	9d 81       	ldd	r25, Y+5	; 0x05
 854:	83 30       	cpi	r24, 0x03	; 3
 856:	91 05       	cpc	r25, r1
 858:	09 f4       	brne	.+2      	; 0x85c <GPIO_writePin+0x66>
 85a:	85 c0       	rjmp	.+266    	; 0x966 <__stack+0x107>
 85c:	af c0       	rjmp	.+350    	; 0x9bc <__stack+0x15d>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 85e:	8b 81       	ldd	r24, Y+3	; 0x03
 860:	81 30       	cpi	r24, 0x01	; 1
 862:	a1 f4       	brne	.+40     	; 0x88c <__stack+0x2d>
			{
				SET_BIT(PORTA,pin_num);
 864:	ab e3       	ldi	r26, 0x3B	; 59
 866:	b0 e0       	ldi	r27, 0x00	; 0
 868:	eb e3       	ldi	r30, 0x3B	; 59
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	80 81       	ld	r24, Z
 86e:	48 2f       	mov	r20, r24
 870:	8a 81       	ldd	r24, Y+2	; 0x02
 872:	28 2f       	mov	r18, r24
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	02 2e       	mov	r0, r18
 87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
 87e:	88 0f       	add	r24, r24
 880:	99 1f       	adc	r25, r25
 882:	0a 94       	dec	r0
 884:	e2 f7       	brpl	.-8      	; 0x87e <__stack+0x1f>
 886:	84 2b       	or	r24, r20
 888:	8c 93       	st	X, r24
 88a:	98 c0       	rjmp	.+304    	; 0x9bc <__stack+0x15d>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 88c:	ab e3       	ldi	r26, 0x3B	; 59
 88e:	b0 e0       	ldi	r27, 0x00	; 0
 890:	eb e3       	ldi	r30, 0x3B	; 59
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	80 81       	ld	r24, Z
 896:	48 2f       	mov	r20, r24
 898:	8a 81       	ldd	r24, Y+2	; 0x02
 89a:	28 2f       	mov	r18, r24
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	02 2e       	mov	r0, r18
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__stack+0x4b>
 8a6:	88 0f       	add	r24, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	0a 94       	dec	r0
 8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <__stack+0x47>
 8ae:	80 95       	com	r24
 8b0:	84 23       	and	r24, r20
 8b2:	8c 93       	st	X, r24
 8b4:	83 c0       	rjmp	.+262    	; 0x9bc <__stack+0x15d>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 8b6:	8b 81       	ldd	r24, Y+3	; 0x03
 8b8:	81 30       	cpi	r24, 0x01	; 1
 8ba:	a1 f4       	brne	.+40     	; 0x8e4 <__stack+0x85>
			{
				SET_BIT(PORTB,pin_num);
 8bc:	a8 e3       	ldi	r26, 0x38	; 56
 8be:	b0 e0       	ldi	r27, 0x00	; 0
 8c0:	e8 e3       	ldi	r30, 0x38	; 56
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	80 81       	ld	r24, Z
 8c6:	48 2f       	mov	r20, r24
 8c8:	8a 81       	ldd	r24, Y+2	; 0x02
 8ca:	28 2f       	mov	r18, r24
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	02 2e       	mov	r0, r18
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <__stack+0x7b>
 8d6:	88 0f       	add	r24, r24
 8d8:	99 1f       	adc	r25, r25
 8da:	0a 94       	dec	r0
 8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <__stack+0x77>
 8de:	84 2b       	or	r24, r20
 8e0:	8c 93       	st	X, r24
 8e2:	6c c0       	rjmp	.+216    	; 0x9bc <__stack+0x15d>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 8e4:	a8 e3       	ldi	r26, 0x38	; 56
 8e6:	b0 e0       	ldi	r27, 0x00	; 0
 8e8:	e8 e3       	ldi	r30, 0x38	; 56
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	80 81       	ld	r24, Z
 8ee:	48 2f       	mov	r20, r24
 8f0:	8a 81       	ldd	r24, Y+2	; 0x02
 8f2:	28 2f       	mov	r18, r24
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	02 2e       	mov	r0, r18
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0xa3>
 8fe:	88 0f       	add	r24, r24
 900:	99 1f       	adc	r25, r25
 902:	0a 94       	dec	r0
 904:	e2 f7       	brpl	.-8      	; 0x8fe <__stack+0x9f>
 906:	80 95       	com	r24
 908:	84 23       	and	r24, r20
 90a:	8c 93       	st	X, r24
 90c:	57 c0       	rjmp	.+174    	; 0x9bc <__stack+0x15d>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 90e:	8b 81       	ldd	r24, Y+3	; 0x03
 910:	81 30       	cpi	r24, 0x01	; 1
 912:	a1 f4       	brne	.+40     	; 0x93c <__stack+0xdd>
			{
				SET_BIT(PORTC,pin_num);
 914:	a5 e3       	ldi	r26, 0x35	; 53
 916:	b0 e0       	ldi	r27, 0x00	; 0
 918:	e5 e3       	ldi	r30, 0x35	; 53
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	80 81       	ld	r24, Z
 91e:	48 2f       	mov	r20, r24
 920:	8a 81       	ldd	r24, Y+2	; 0x02
 922:	28 2f       	mov	r18, r24
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	02 2e       	mov	r0, r18
 92c:	02 c0       	rjmp	.+4      	; 0x932 <__stack+0xd3>
 92e:	88 0f       	add	r24, r24
 930:	99 1f       	adc	r25, r25
 932:	0a 94       	dec	r0
 934:	e2 f7       	brpl	.-8      	; 0x92e <__stack+0xcf>
 936:	84 2b       	or	r24, r20
 938:	8c 93       	st	X, r24
 93a:	40 c0       	rjmp	.+128    	; 0x9bc <__stack+0x15d>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 93c:	a5 e3       	ldi	r26, 0x35	; 53
 93e:	b0 e0       	ldi	r27, 0x00	; 0
 940:	e5 e3       	ldi	r30, 0x35	; 53
 942:	f0 e0       	ldi	r31, 0x00	; 0
 944:	80 81       	ld	r24, Z
 946:	48 2f       	mov	r20, r24
 948:	8a 81       	ldd	r24, Y+2	; 0x02
 94a:	28 2f       	mov	r18, r24
 94c:	30 e0       	ldi	r19, 0x00	; 0
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	02 2e       	mov	r0, r18
 954:	02 c0       	rjmp	.+4      	; 0x95a <__stack+0xfb>
 956:	88 0f       	add	r24, r24
 958:	99 1f       	adc	r25, r25
 95a:	0a 94       	dec	r0
 95c:	e2 f7       	brpl	.-8      	; 0x956 <__stack+0xf7>
 95e:	80 95       	com	r24
 960:	84 23       	and	r24, r20
 962:	8c 93       	st	X, r24
 964:	2b c0       	rjmp	.+86     	; 0x9bc <__stack+0x15d>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 966:	8b 81       	ldd	r24, Y+3	; 0x03
 968:	81 30       	cpi	r24, 0x01	; 1
 96a:	a1 f4       	brne	.+40     	; 0x994 <__stack+0x135>
			{
				SET_BIT(PORTD,pin_num);
 96c:	a2 e3       	ldi	r26, 0x32	; 50
 96e:	b0 e0       	ldi	r27, 0x00	; 0
 970:	e2 e3       	ldi	r30, 0x32	; 50
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	80 81       	ld	r24, Z
 976:	48 2f       	mov	r20, r24
 978:	8a 81       	ldd	r24, Y+2	; 0x02
 97a:	28 2f       	mov	r18, r24
 97c:	30 e0       	ldi	r19, 0x00	; 0
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	02 2e       	mov	r0, r18
 984:	02 c0       	rjmp	.+4      	; 0x98a <__stack+0x12b>
 986:	88 0f       	add	r24, r24
 988:	99 1f       	adc	r25, r25
 98a:	0a 94       	dec	r0
 98c:	e2 f7       	brpl	.-8      	; 0x986 <__stack+0x127>
 98e:	84 2b       	or	r24, r20
 990:	8c 93       	st	X, r24
 992:	14 c0       	rjmp	.+40     	; 0x9bc <__stack+0x15d>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 994:	a2 e3       	ldi	r26, 0x32	; 50
 996:	b0 e0       	ldi	r27, 0x00	; 0
 998:	e2 e3       	ldi	r30, 0x32	; 50
 99a:	f0 e0       	ldi	r31, 0x00	; 0
 99c:	80 81       	ld	r24, Z
 99e:	48 2f       	mov	r20, r24
 9a0:	8a 81       	ldd	r24, Y+2	; 0x02
 9a2:	28 2f       	mov	r18, r24
 9a4:	30 e0       	ldi	r19, 0x00	; 0
 9a6:	81 e0       	ldi	r24, 0x01	; 1
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	02 2e       	mov	r0, r18
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <__stack+0x153>
 9ae:	88 0f       	add	r24, r24
 9b0:	99 1f       	adc	r25, r25
 9b2:	0a 94       	dec	r0
 9b4:	e2 f7       	brpl	.-8      	; 0x9ae <__stack+0x14f>
 9b6:	80 95       	com	r24
 9b8:	84 23       	and	r24, r20
 9ba:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 9bc:	0f 90       	pop	r0
 9be:	0f 90       	pop	r0
 9c0:	0f 90       	pop	r0
 9c2:	0f 90       	pop	r0
 9c4:	0f 90       	pop	r0
 9c6:	cf 91       	pop	r28
 9c8:	df 91       	pop	r29
 9ca:	08 95       	ret

000009cc <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
 9cc:	df 93       	push	r29
 9ce:	cf 93       	push	r28
 9d0:	00 d0       	rcall	.+0      	; 0x9d2 <GPIO_readPin+0x6>
 9d2:	00 d0       	rcall	.+0      	; 0x9d4 <GPIO_readPin+0x8>
 9d4:	0f 92       	push	r0
 9d6:	cd b7       	in	r28, 0x3d	; 61
 9d8:	de b7       	in	r29, 0x3e	; 62
 9da:	8a 83       	std	Y+2, r24	; 0x02
 9dc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
 9de:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 9e0:	8b 81       	ldd	r24, Y+3	; 0x03
 9e2:	88 30       	cpi	r24, 0x08	; 8
 9e4:	08 f0       	brcs	.+2      	; 0x9e8 <GPIO_readPin+0x1c>
 9e6:	84 c0       	rjmp	.+264    	; 0xaf0 <GPIO_readPin+0x124>
 9e8:	8a 81       	ldd	r24, Y+2	; 0x02
 9ea:	84 30       	cpi	r24, 0x04	; 4
 9ec:	08 f0       	brcs	.+2      	; 0x9f0 <GPIO_readPin+0x24>
 9ee:	80 c0       	rjmp	.+256    	; 0xaf0 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
 9f0:	8a 81       	ldd	r24, Y+2	; 0x02
 9f2:	28 2f       	mov	r18, r24
 9f4:	30 e0       	ldi	r19, 0x00	; 0
 9f6:	3d 83       	std	Y+5, r19	; 0x05
 9f8:	2c 83       	std	Y+4, r18	; 0x04
 9fa:	4c 81       	ldd	r20, Y+4	; 0x04
 9fc:	5d 81       	ldd	r21, Y+5	; 0x05
 9fe:	41 30       	cpi	r20, 0x01	; 1
 a00:	51 05       	cpc	r21, r1
 a02:	79 f1       	breq	.+94     	; 0xa62 <GPIO_readPin+0x96>
 a04:	8c 81       	ldd	r24, Y+4	; 0x04
 a06:	9d 81       	ldd	r25, Y+5	; 0x05
 a08:	82 30       	cpi	r24, 0x02	; 2
 a0a:	91 05       	cpc	r25, r1
 a0c:	34 f4       	brge	.+12     	; 0xa1a <GPIO_readPin+0x4e>
 a0e:	2c 81       	ldd	r18, Y+4	; 0x04
 a10:	3d 81       	ldd	r19, Y+5	; 0x05
 a12:	21 15       	cp	r18, r1
 a14:	31 05       	cpc	r19, r1
 a16:	69 f0       	breq	.+26     	; 0xa32 <GPIO_readPin+0x66>
 a18:	6b c0       	rjmp	.+214    	; 0xaf0 <GPIO_readPin+0x124>
 a1a:	4c 81       	ldd	r20, Y+4	; 0x04
 a1c:	5d 81       	ldd	r21, Y+5	; 0x05
 a1e:	42 30       	cpi	r20, 0x02	; 2
 a20:	51 05       	cpc	r21, r1
 a22:	b9 f1       	breq	.+110    	; 0xa92 <GPIO_readPin+0xc6>
 a24:	8c 81       	ldd	r24, Y+4	; 0x04
 a26:	9d 81       	ldd	r25, Y+5	; 0x05
 a28:	83 30       	cpi	r24, 0x03	; 3
 a2a:	91 05       	cpc	r25, r1
 a2c:	09 f4       	brne	.+2      	; 0xa30 <GPIO_readPin+0x64>
 a2e:	49 c0       	rjmp	.+146    	; 0xac2 <GPIO_readPin+0xf6>
 a30:	5f c0       	rjmp	.+190    	; 0xaf0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 a32:	e9 e3       	ldi	r30, 0x39	; 57
 a34:	f0 e0       	ldi	r31, 0x00	; 0
 a36:	80 81       	ld	r24, Z
 a38:	28 2f       	mov	r18, r24
 a3a:	30 e0       	ldi	r19, 0x00	; 0
 a3c:	8b 81       	ldd	r24, Y+3	; 0x03
 a3e:	88 2f       	mov	r24, r24
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	a9 01       	movw	r20, r18
 a44:	02 c0       	rjmp	.+4      	; 0xa4a <GPIO_readPin+0x7e>
 a46:	55 95       	asr	r21
 a48:	47 95       	ror	r20
 a4a:	8a 95       	dec	r24
 a4c:	e2 f7       	brpl	.-8      	; 0xa46 <GPIO_readPin+0x7a>
 a4e:	ca 01       	movw	r24, r20
 a50:	81 70       	andi	r24, 0x01	; 1
 a52:	90 70       	andi	r25, 0x00	; 0
 a54:	88 23       	and	r24, r24
 a56:	19 f0       	breq	.+6      	; 0xa5e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
 a58:	81 e0       	ldi	r24, 0x01	; 1
 a5a:	89 83       	std	Y+1, r24	; 0x01
 a5c:	49 c0       	rjmp	.+146    	; 0xaf0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 a5e:	19 82       	std	Y+1, r1	; 0x01
 a60:	47 c0       	rjmp	.+142    	; 0xaf0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 a62:	e6 e3       	ldi	r30, 0x36	; 54
 a64:	f0 e0       	ldi	r31, 0x00	; 0
 a66:	80 81       	ld	r24, Z
 a68:	28 2f       	mov	r18, r24
 a6a:	30 e0       	ldi	r19, 0x00	; 0
 a6c:	8b 81       	ldd	r24, Y+3	; 0x03
 a6e:	88 2f       	mov	r24, r24
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	a9 01       	movw	r20, r18
 a74:	02 c0       	rjmp	.+4      	; 0xa7a <GPIO_readPin+0xae>
 a76:	55 95       	asr	r21
 a78:	47 95       	ror	r20
 a7a:	8a 95       	dec	r24
 a7c:	e2 f7       	brpl	.-8      	; 0xa76 <GPIO_readPin+0xaa>
 a7e:	ca 01       	movw	r24, r20
 a80:	81 70       	andi	r24, 0x01	; 1
 a82:	90 70       	andi	r25, 0x00	; 0
 a84:	88 23       	and	r24, r24
 a86:	19 f0       	breq	.+6      	; 0xa8e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
 a88:	81 e0       	ldi	r24, 0x01	; 1
 a8a:	89 83       	std	Y+1, r24	; 0x01
 a8c:	31 c0       	rjmp	.+98     	; 0xaf0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 a8e:	19 82       	std	Y+1, r1	; 0x01
 a90:	2f c0       	rjmp	.+94     	; 0xaf0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 a92:	e3 e3       	ldi	r30, 0x33	; 51
 a94:	f0 e0       	ldi	r31, 0x00	; 0
 a96:	80 81       	ld	r24, Z
 a98:	28 2f       	mov	r18, r24
 a9a:	30 e0       	ldi	r19, 0x00	; 0
 a9c:	8b 81       	ldd	r24, Y+3	; 0x03
 a9e:	88 2f       	mov	r24, r24
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	a9 01       	movw	r20, r18
 aa4:	02 c0       	rjmp	.+4      	; 0xaaa <GPIO_readPin+0xde>
 aa6:	55 95       	asr	r21
 aa8:	47 95       	ror	r20
 aaa:	8a 95       	dec	r24
 aac:	e2 f7       	brpl	.-8      	; 0xaa6 <GPIO_readPin+0xda>
 aae:	ca 01       	movw	r24, r20
 ab0:	81 70       	andi	r24, 0x01	; 1
 ab2:	90 70       	andi	r25, 0x00	; 0
 ab4:	88 23       	and	r24, r24
 ab6:	19 f0       	breq	.+6      	; 0xabe <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
 ab8:	81 e0       	ldi	r24, 0x01	; 1
 aba:	89 83       	std	Y+1, r24	; 0x01
 abc:	19 c0       	rjmp	.+50     	; 0xaf0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 abe:	19 82       	std	Y+1, r1	; 0x01
 ac0:	17 c0       	rjmp	.+46     	; 0xaf0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 ac2:	e0 e3       	ldi	r30, 0x30	; 48
 ac4:	f0 e0       	ldi	r31, 0x00	; 0
 ac6:	80 81       	ld	r24, Z
 ac8:	28 2f       	mov	r18, r24
 aca:	30 e0       	ldi	r19, 0x00	; 0
 acc:	8b 81       	ldd	r24, Y+3	; 0x03
 ace:	88 2f       	mov	r24, r24
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	a9 01       	movw	r20, r18
 ad4:	02 c0       	rjmp	.+4      	; 0xada <GPIO_readPin+0x10e>
 ad6:	55 95       	asr	r21
 ad8:	47 95       	ror	r20
 ada:	8a 95       	dec	r24
 adc:	e2 f7       	brpl	.-8      	; 0xad6 <GPIO_readPin+0x10a>
 ade:	ca 01       	movw	r24, r20
 ae0:	81 70       	andi	r24, 0x01	; 1
 ae2:	90 70       	andi	r25, 0x00	; 0
 ae4:	88 23       	and	r24, r24
 ae6:	19 f0       	breq	.+6      	; 0xaee <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
 ae8:	81 e0       	ldi	r24, 0x01	; 1
 aea:	89 83       	std	Y+1, r24	; 0x01
 aec:	01 c0       	rjmp	.+2      	; 0xaf0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 aee:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
 af0:	89 81       	ldd	r24, Y+1	; 0x01
}
 af2:	0f 90       	pop	r0
 af4:	0f 90       	pop	r0
 af6:	0f 90       	pop	r0
 af8:	0f 90       	pop	r0
 afa:	0f 90       	pop	r0
 afc:	cf 91       	pop	r28
 afe:	df 91       	pop	r29
 b00:	08 95       	ret

00000b02 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
 b02:	df 93       	push	r29
 b04:	cf 93       	push	r28
 b06:	00 d0       	rcall	.+0      	; 0xb08 <GPIO_setupPortDirection+0x6>
 b08:	00 d0       	rcall	.+0      	; 0xb0a <GPIO_setupPortDirection+0x8>
 b0a:	cd b7       	in	r28, 0x3d	; 61
 b0c:	de b7       	in	r29, 0x3e	; 62
 b0e:	89 83       	std	Y+1, r24	; 0x01
 b10:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 b12:	89 81       	ldd	r24, Y+1	; 0x01
 b14:	84 30       	cpi	r24, 0x04	; 4
 b16:	90 f5       	brcc	.+100    	; 0xb7c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
 b18:	89 81       	ldd	r24, Y+1	; 0x01
 b1a:	28 2f       	mov	r18, r24
 b1c:	30 e0       	ldi	r19, 0x00	; 0
 b1e:	3c 83       	std	Y+4, r19	; 0x04
 b20:	2b 83       	std	Y+3, r18	; 0x03
 b22:	8b 81       	ldd	r24, Y+3	; 0x03
 b24:	9c 81       	ldd	r25, Y+4	; 0x04
 b26:	81 30       	cpi	r24, 0x01	; 1
 b28:	91 05       	cpc	r25, r1
 b2a:	d1 f0       	breq	.+52     	; 0xb60 <GPIO_setupPortDirection+0x5e>
 b2c:	2b 81       	ldd	r18, Y+3	; 0x03
 b2e:	3c 81       	ldd	r19, Y+4	; 0x04
 b30:	22 30       	cpi	r18, 0x02	; 2
 b32:	31 05       	cpc	r19, r1
 b34:	2c f4       	brge	.+10     	; 0xb40 <GPIO_setupPortDirection+0x3e>
 b36:	8b 81       	ldd	r24, Y+3	; 0x03
 b38:	9c 81       	ldd	r25, Y+4	; 0x04
 b3a:	00 97       	sbiw	r24, 0x00	; 0
 b3c:	61 f0       	breq	.+24     	; 0xb56 <GPIO_setupPortDirection+0x54>
 b3e:	1e c0       	rjmp	.+60     	; 0xb7c <GPIO_setupPortDirection+0x7a>
 b40:	2b 81       	ldd	r18, Y+3	; 0x03
 b42:	3c 81       	ldd	r19, Y+4	; 0x04
 b44:	22 30       	cpi	r18, 0x02	; 2
 b46:	31 05       	cpc	r19, r1
 b48:	81 f0       	breq	.+32     	; 0xb6a <GPIO_setupPortDirection+0x68>
 b4a:	8b 81       	ldd	r24, Y+3	; 0x03
 b4c:	9c 81       	ldd	r25, Y+4	; 0x04
 b4e:	83 30       	cpi	r24, 0x03	; 3
 b50:	91 05       	cpc	r25, r1
 b52:	81 f0       	breq	.+32     	; 0xb74 <GPIO_setupPortDirection+0x72>
 b54:	13 c0       	rjmp	.+38     	; 0xb7c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
 b56:	ea e3       	ldi	r30, 0x3A	; 58
 b58:	f0 e0       	ldi	r31, 0x00	; 0
 b5a:	8a 81       	ldd	r24, Y+2	; 0x02
 b5c:	80 83       	st	Z, r24
 b5e:	0e c0       	rjmp	.+28     	; 0xb7c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
 b60:	e7 e3       	ldi	r30, 0x37	; 55
 b62:	f0 e0       	ldi	r31, 0x00	; 0
 b64:	8a 81       	ldd	r24, Y+2	; 0x02
 b66:	80 83       	st	Z, r24
 b68:	09 c0       	rjmp	.+18     	; 0xb7c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
 b6a:	e4 e3       	ldi	r30, 0x34	; 52
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	8a 81       	ldd	r24, Y+2	; 0x02
 b70:	80 83       	st	Z, r24
 b72:	04 c0       	rjmp	.+8      	; 0xb7c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
 b74:	e1 e3       	ldi	r30, 0x31	; 49
 b76:	f0 e0       	ldi	r31, 0x00	; 0
 b78:	8a 81       	ldd	r24, Y+2	; 0x02
 b7a:	80 83       	st	Z, r24
			break;
		}
	}
}
 b7c:	0f 90       	pop	r0
 b7e:	0f 90       	pop	r0
 b80:	0f 90       	pop	r0
 b82:	0f 90       	pop	r0
 b84:	cf 91       	pop	r28
 b86:	df 91       	pop	r29
 b88:	08 95       	ret

00000b8a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
 b8a:	df 93       	push	r29
 b8c:	cf 93       	push	r28
 b8e:	00 d0       	rcall	.+0      	; 0xb90 <GPIO_writePort+0x6>
 b90:	00 d0       	rcall	.+0      	; 0xb92 <GPIO_writePort+0x8>
 b92:	cd b7       	in	r28, 0x3d	; 61
 b94:	de b7       	in	r29, 0x3e	; 62
 b96:	89 83       	std	Y+1, r24	; 0x01
 b98:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 b9a:	89 81       	ldd	r24, Y+1	; 0x01
 b9c:	84 30       	cpi	r24, 0x04	; 4
 b9e:	90 f5       	brcc	.+100    	; 0xc04 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
 ba0:	89 81       	ldd	r24, Y+1	; 0x01
 ba2:	28 2f       	mov	r18, r24
 ba4:	30 e0       	ldi	r19, 0x00	; 0
 ba6:	3c 83       	std	Y+4, r19	; 0x04
 ba8:	2b 83       	std	Y+3, r18	; 0x03
 baa:	8b 81       	ldd	r24, Y+3	; 0x03
 bac:	9c 81       	ldd	r25, Y+4	; 0x04
 bae:	81 30       	cpi	r24, 0x01	; 1
 bb0:	91 05       	cpc	r25, r1
 bb2:	d1 f0       	breq	.+52     	; 0xbe8 <GPIO_writePort+0x5e>
 bb4:	2b 81       	ldd	r18, Y+3	; 0x03
 bb6:	3c 81       	ldd	r19, Y+4	; 0x04
 bb8:	22 30       	cpi	r18, 0x02	; 2
 bba:	31 05       	cpc	r19, r1
 bbc:	2c f4       	brge	.+10     	; 0xbc8 <GPIO_writePort+0x3e>
 bbe:	8b 81       	ldd	r24, Y+3	; 0x03
 bc0:	9c 81       	ldd	r25, Y+4	; 0x04
 bc2:	00 97       	sbiw	r24, 0x00	; 0
 bc4:	61 f0       	breq	.+24     	; 0xbde <GPIO_writePort+0x54>
 bc6:	1e c0       	rjmp	.+60     	; 0xc04 <GPIO_writePort+0x7a>
 bc8:	2b 81       	ldd	r18, Y+3	; 0x03
 bca:	3c 81       	ldd	r19, Y+4	; 0x04
 bcc:	22 30       	cpi	r18, 0x02	; 2
 bce:	31 05       	cpc	r19, r1
 bd0:	81 f0       	breq	.+32     	; 0xbf2 <GPIO_writePort+0x68>
 bd2:	8b 81       	ldd	r24, Y+3	; 0x03
 bd4:	9c 81       	ldd	r25, Y+4	; 0x04
 bd6:	83 30       	cpi	r24, 0x03	; 3
 bd8:	91 05       	cpc	r25, r1
 bda:	81 f0       	breq	.+32     	; 0xbfc <GPIO_writePort+0x72>
 bdc:	13 c0       	rjmp	.+38     	; 0xc04 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
 bde:	eb e3       	ldi	r30, 0x3B	; 59
 be0:	f0 e0       	ldi	r31, 0x00	; 0
 be2:	8a 81       	ldd	r24, Y+2	; 0x02
 be4:	80 83       	st	Z, r24
 be6:	0e c0       	rjmp	.+28     	; 0xc04 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
 be8:	e8 e3       	ldi	r30, 0x38	; 56
 bea:	f0 e0       	ldi	r31, 0x00	; 0
 bec:	8a 81       	ldd	r24, Y+2	; 0x02
 bee:	80 83       	st	Z, r24
 bf0:	09 c0       	rjmp	.+18     	; 0xc04 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
 bf2:	e5 e3       	ldi	r30, 0x35	; 53
 bf4:	f0 e0       	ldi	r31, 0x00	; 0
 bf6:	8a 81       	ldd	r24, Y+2	; 0x02
 bf8:	80 83       	st	Z, r24
 bfa:	04 c0       	rjmp	.+8      	; 0xc04 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
 bfc:	e2 e3       	ldi	r30, 0x32	; 50
 bfe:	f0 e0       	ldi	r31, 0x00	; 0
 c00:	8a 81       	ldd	r24, Y+2	; 0x02
 c02:	80 83       	st	Z, r24
			break;
		}
	}
}
 c04:	0f 90       	pop	r0
 c06:	0f 90       	pop	r0
 c08:	0f 90       	pop	r0
 c0a:	0f 90       	pop	r0
 c0c:	cf 91       	pop	r28
 c0e:	df 91       	pop	r29
 c10:	08 95       	ret

00000c12 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
 c12:	df 93       	push	r29
 c14:	cf 93       	push	r28
 c16:	00 d0       	rcall	.+0      	; 0xc18 <GPIO_readPort+0x6>
 c18:	00 d0       	rcall	.+0      	; 0xc1a <GPIO_readPort+0x8>
 c1a:	cd b7       	in	r28, 0x3d	; 61
 c1c:	de b7       	in	r29, 0x3e	; 62
 c1e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
 c20:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 c22:	8a 81       	ldd	r24, Y+2	; 0x02
 c24:	84 30       	cpi	r24, 0x04	; 4
 c26:	90 f5       	brcc	.+100    	; 0xc8c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
 c28:	8a 81       	ldd	r24, Y+2	; 0x02
 c2a:	28 2f       	mov	r18, r24
 c2c:	30 e0       	ldi	r19, 0x00	; 0
 c2e:	3c 83       	std	Y+4, r19	; 0x04
 c30:	2b 83       	std	Y+3, r18	; 0x03
 c32:	8b 81       	ldd	r24, Y+3	; 0x03
 c34:	9c 81       	ldd	r25, Y+4	; 0x04
 c36:	81 30       	cpi	r24, 0x01	; 1
 c38:	91 05       	cpc	r25, r1
 c3a:	d1 f0       	breq	.+52     	; 0xc70 <GPIO_readPort+0x5e>
 c3c:	2b 81       	ldd	r18, Y+3	; 0x03
 c3e:	3c 81       	ldd	r19, Y+4	; 0x04
 c40:	22 30       	cpi	r18, 0x02	; 2
 c42:	31 05       	cpc	r19, r1
 c44:	2c f4       	brge	.+10     	; 0xc50 <GPIO_readPort+0x3e>
 c46:	8b 81       	ldd	r24, Y+3	; 0x03
 c48:	9c 81       	ldd	r25, Y+4	; 0x04
 c4a:	00 97       	sbiw	r24, 0x00	; 0
 c4c:	61 f0       	breq	.+24     	; 0xc66 <GPIO_readPort+0x54>
 c4e:	1e c0       	rjmp	.+60     	; 0xc8c <GPIO_readPort+0x7a>
 c50:	2b 81       	ldd	r18, Y+3	; 0x03
 c52:	3c 81       	ldd	r19, Y+4	; 0x04
 c54:	22 30       	cpi	r18, 0x02	; 2
 c56:	31 05       	cpc	r19, r1
 c58:	81 f0       	breq	.+32     	; 0xc7a <GPIO_readPort+0x68>
 c5a:	8b 81       	ldd	r24, Y+3	; 0x03
 c5c:	9c 81       	ldd	r25, Y+4	; 0x04
 c5e:	83 30       	cpi	r24, 0x03	; 3
 c60:	91 05       	cpc	r25, r1
 c62:	81 f0       	breq	.+32     	; 0xc84 <GPIO_readPort+0x72>
 c64:	13 c0       	rjmp	.+38     	; 0xc8c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
 c66:	e9 e3       	ldi	r30, 0x39	; 57
 c68:	f0 e0       	ldi	r31, 0x00	; 0
 c6a:	80 81       	ld	r24, Z
 c6c:	89 83       	std	Y+1, r24	; 0x01
 c6e:	0e c0       	rjmp	.+28     	; 0xc8c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
 c70:	e6 e3       	ldi	r30, 0x36	; 54
 c72:	f0 e0       	ldi	r31, 0x00	; 0
 c74:	80 81       	ld	r24, Z
 c76:	89 83       	std	Y+1, r24	; 0x01
 c78:	09 c0       	rjmp	.+18     	; 0xc8c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
 c7a:	e3 e3       	ldi	r30, 0x33	; 51
 c7c:	f0 e0       	ldi	r31, 0x00	; 0
 c7e:	80 81       	ld	r24, Z
 c80:	89 83       	std	Y+1, r24	; 0x01
 c82:	04 c0       	rjmp	.+8      	; 0xc8c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
 c84:	e0 e3       	ldi	r30, 0x30	; 48
 c86:	f0 e0       	ldi	r31, 0x00	; 0
 c88:	80 81       	ld	r24, Z
 c8a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
 c8c:	89 81       	ldd	r24, Y+1	; 0x01
}
 c8e:	0f 90       	pop	r0
 c90:	0f 90       	pop	r0
 c92:	0f 90       	pop	r0
 c94:	0f 90       	pop	r0
 c96:	cf 91       	pop	r28
 c98:	df 91       	pop	r29
 c9a:	08 95       	ret

00000c9c <__vector_1>:
#include "../../MCAL/gpio_module/gpio.h"
#include "../../std_types.h"
/*global variable to carry the address of the callback function*/
void (*g_fun_ptr)(void)=NULL_PTR;
/*this function will be called if the interrupt is fired*/
ISR(INT0_vect){
 c9c:	1f 92       	push	r1
 c9e:	0f 92       	push	r0
 ca0:	0f b6       	in	r0, 0x3f	; 63
 ca2:	0f 92       	push	r0
 ca4:	11 24       	eor	r1, r1
 ca6:	2f 93       	push	r18
 ca8:	3f 93       	push	r19
 caa:	4f 93       	push	r20
 cac:	5f 93       	push	r21
 cae:	6f 93       	push	r22
 cb0:	7f 93       	push	r23
 cb2:	8f 93       	push	r24
 cb4:	9f 93       	push	r25
 cb6:	af 93       	push	r26
 cb8:	bf 93       	push	r27
 cba:	ef 93       	push	r30
 cbc:	ff 93       	push	r31
 cbe:	df 93       	push	r29
 cc0:	cf 93       	push	r28
 cc2:	cd b7       	in	r28, 0x3d	; 61
 cc4:	de b7       	in	r29, 0x3e	; 62
if(g_fun_ptr!=NULL_PTR){
 cc6:	80 91 65 00 	lds	r24, 0x0065
 cca:	90 91 66 00 	lds	r25, 0x0066
 cce:	00 97       	sbiw	r24, 0x00	; 0
 cd0:	29 f0       	breq	.+10     	; 0xcdc <__vector_1+0x40>
	g_fun_ptr();
 cd2:	e0 91 65 00 	lds	r30, 0x0065
 cd6:	f0 91 66 00 	lds	r31, 0x0066
 cda:	09 95       	icall
}
}
 cdc:	cf 91       	pop	r28
 cde:	df 91       	pop	r29
 ce0:	ff 91       	pop	r31
 ce2:	ef 91       	pop	r30
 ce4:	bf 91       	pop	r27
 ce6:	af 91       	pop	r26
 ce8:	9f 91       	pop	r25
 cea:	8f 91       	pop	r24
 cec:	7f 91       	pop	r23
 cee:	6f 91       	pop	r22
 cf0:	5f 91       	pop	r21
 cf2:	4f 91       	pop	r20
 cf4:	3f 91       	pop	r19
 cf6:	2f 91       	pop	r18
 cf8:	0f 90       	pop	r0
 cfa:	0f be       	out	0x3f, r0	; 63
 cfc:	0f 90       	pop	r0
 cfe:	1f 90       	pop	r1
 d00:	18 95       	reti

00000d02 <PUSHBUTTON_init>:
/*this function is to initialize the push button*/
PUSHBUTTON_return PUSHBUTTON_init(PUSHBUTTON_interruptEvent event){
 d02:	df 93       	push	r29
 d04:	cf 93       	push	r28
 d06:	0f 92       	push	r0
 d08:	cd b7       	in	r28, 0x3d	; 61
 d0a:	de b7       	in	r29, 0x3e	; 62
 d0c:	89 83       	std	Y+1, r24	; 0x01
	/*enabling global interrupts*/
	SREG  |= (1<<7);
 d0e:	af e5       	ldi	r26, 0x5F	; 95
 d10:	b0 e0       	ldi	r27, 0x00	; 0
 d12:	ef e5       	ldi	r30, 0x5F	; 95
 d14:	f0 e0       	ldi	r31, 0x00	; 0
 d16:	80 81       	ld	r24, Z
 d18:	80 68       	ori	r24, 0x80	; 128
 d1a:	8c 93       	st	X, r24
	/*setting PD2-INT0 as input pin*/
	GPIO_setupPinDirection(PORTD_ID, PIN2_ID, PIN_INPUT);
 d1c:	83 e0       	ldi	r24, 0x03	; 3
 d1e:	62 e0       	ldi	r22, 0x02	; 2
 d20:	40 e0       	ldi	r20, 0x00	; 0
 d22:	0e 94 10 03 	call	0x620	; 0x620 <GPIO_setupPinDirection>
	/*setting INT0 at raising edge*/
	MCUCR = (MCUCR &~((1<<ISC01)|(1<<ISC00)))|(event);
 d26:	a5 e5       	ldi	r26, 0x55	; 85
 d28:	b0 e0       	ldi	r27, 0x00	; 0
 d2a:	e5 e5       	ldi	r30, 0x55	; 85
 d2c:	f0 e0       	ldi	r31, 0x00	; 0
 d2e:	80 81       	ld	r24, Z
 d30:	98 2f       	mov	r25, r24
 d32:	9c 7f       	andi	r25, 0xFC	; 252
 d34:	89 81       	ldd	r24, Y+1	; 0x01
 d36:	89 2b       	or	r24, r25
 d38:	8c 93       	st	X, r24
	/*enabling external interrupt INT0*/
	GICR  |= (1<<INT0);
 d3a:	ab e5       	ldi	r26, 0x5B	; 91
 d3c:	b0 e0       	ldi	r27, 0x00	; 0
 d3e:	eb e5       	ldi	r30, 0x5B	; 91
 d40:	f0 e0       	ldi	r31, 0x00	; 0
 d42:	80 81       	ld	r24, Z
 d44:	80 64       	ori	r24, 0x40	; 64
 d46:	8c 93       	st	X, r24
	return PUSHBUTTON_DONE;
 d48:	81 e0       	ldi	r24, 0x01	; 1
}
 d4a:	0f 90       	pop	r0
 d4c:	cf 91       	pop	r28
 d4e:	df 91       	pop	r29
 d50:	08 95       	ret

00000d52 <PUSHBUTTON_setISR>:
/*this function is to set the ISR of the button*/
PUSHBUTTON_return PUSHBUTTON_setISR( void (*fun_ptr)(void)){
 d52:	df 93       	push	r29
 d54:	cf 93       	push	r28
 d56:	00 d0       	rcall	.+0      	; 0xd58 <PUSHBUTTON_setISR+0x6>
 d58:	cd b7       	in	r28, 0x3d	; 61
 d5a:	de b7       	in	r29, 0x3e	; 62
 d5c:	9a 83       	std	Y+2, r25	; 0x02
 d5e:	89 83       	std	Y+1, r24	; 0x01
	g_fun_ptr=fun_ptr;
 d60:	89 81       	ldd	r24, Y+1	; 0x01
 d62:	9a 81       	ldd	r25, Y+2	; 0x02
 d64:	90 93 66 00 	sts	0x0066, r25
 d68:	80 93 65 00 	sts	0x0065, r24
	return PUSHBUTTON_DONE;
 d6c:	81 e0       	ldi	r24, 0x01	; 1
}
 d6e:	0f 90       	pop	r0
 d70:	0f 90       	pop	r0
 d72:	cf 91       	pop	r28
 d74:	df 91       	pop	r29
 d76:	08 95       	ret

00000d78 <LED_setup>:

#include "led.h"
#include "../../MCAL/gpio_module/gpio.h"
/*this function is made to setup the LEDS*/
LED_return LED_setup(uint8 port,uint8 pin)
{
 d78:	df 93       	push	r29
 d7a:	cf 93       	push	r28
 d7c:	00 d0       	rcall	.+0      	; 0xd7e <LED_setup+0x6>
 d7e:	cd b7       	in	r28, 0x3d	; 61
 d80:	de b7       	in	r29, 0x3e	; 62
 d82:	89 83       	std	Y+1, r24	; 0x01
 d84:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_setupPinDirection(port, pin, PIN_OUTPUT);
 d86:	89 81       	ldd	r24, Y+1	; 0x01
 d88:	6a 81       	ldd	r22, Y+2	; 0x02
 d8a:	41 e0       	ldi	r20, 0x01	; 1
 d8c:	0e 94 10 03 	call	0x620	; 0x620 <GPIO_setupPinDirection>
		GPIO_writePin(port, pin, LOGIC_LOW);
 d90:	89 81       	ldd	r24, Y+1	; 0x01
 d92:	6a 81       	ldd	r22, Y+2	; 0x02
 d94:	40 e0       	ldi	r20, 0x00	; 0
 d96:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <GPIO_writePin>
		return LED_DONE;
 d9a:	81 e0       	ldi	r24, 0x01	; 1
}
 d9c:	0f 90       	pop	r0
 d9e:	0f 90       	pop	r0
 da0:	cf 91       	pop	r28
 da2:	df 91       	pop	r29
 da4:	08 95       	ret

00000da6 <LED_control>:
/*this function is made to control LEDS*/
LED_return LED_control(uint8 port,uint8 pin,LED_state state){
 da6:	df 93       	push	r29
 da8:	cf 93       	push	r28
 daa:	00 d0       	rcall	.+0      	; 0xdac <LED_control+0x6>
 dac:	0f 92       	push	r0
 dae:	cd b7       	in	r28, 0x3d	; 61
 db0:	de b7       	in	r29, 0x3e	; 62
 db2:	89 83       	std	Y+1, r24	; 0x01
 db4:	6a 83       	std	Y+2, r22	; 0x02
 db6:	4b 83       	std	Y+3, r20	; 0x03
	GPIO_writePin(port, pin,state);
 db8:	89 81       	ldd	r24, Y+1	; 0x01
 dba:	6a 81       	ldd	r22, Y+2	; 0x02
 dbc:	4b 81       	ldd	r20, Y+3	; 0x03
 dbe:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <GPIO_writePin>
	return LED_DONE;
 dc2:	81 e0       	ldi	r24, 0x01	; 1
}
 dc4:	0f 90       	pop	r0
 dc6:	0f 90       	pop	r0
 dc8:	0f 90       	pop	r0
 dca:	cf 91       	pop	r28
 dcc:	df 91       	pop	r29
 dce:	08 95       	ret

00000dd0 <main>:
#include "application/app.h"
int main(){
 dd0:	df 93       	push	r29
 dd2:	cf 93       	push	r28
 dd4:	cd b7       	in	r28, 0x3d	; 61
 dd6:	de b7       	in	r29, 0x3e	; 62
	application();
 dd8:	0e 94 92 00 	call	0x124	; 0x124 <application>
 ddc:	80 e0       	ldi	r24, 0x00	; 0
 dde:	90 e0       	ldi	r25, 0x00	; 0
}
 de0:	cf 91       	pop	r28
 de2:	df 91       	pop	r29
 de4:	08 95       	ret

00000de6 <_exit>:
 de6:	f8 94       	cli

00000de8 <__stop_program>:
 de8:	ff cf       	rjmp	.-2      	; 0xde8 <__stop_program>
