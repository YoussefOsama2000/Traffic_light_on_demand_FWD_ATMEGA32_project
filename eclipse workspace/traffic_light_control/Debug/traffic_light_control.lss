
traffic_light_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d08  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800060  00800060  00000d7c  2**0
                  ALLOC
  2 .stab         000017c4  00000000  00000000  00000d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000014df  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 77 06 	call	0xcee	; 0xcee <main>
  74:	0c 94 82 06 	jmp	0xd04	; 0xd04 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Timer1_init>:

static void (*callback) (void)=NULL_PTR;
/*this function initialize timer 1
 * configuration has initial value , compare value , pre-scaler ,operation mode
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <Timer1_init+0x6>
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	9a 83       	std	Y+2, r25	; 0x02
  88:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Enabling global interrupt
	 */
	SET_BIT(SREG,SPIE);
  8a:	af e5       	ldi	r26, 0x5F	; 95
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	ef e5       	ldi	r30, 0x5F	; 95
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	80 68       	ori	r24, 0x80	; 128
  96:	8c 93       	st	X, r24
	/*
	 * enabling interrupt (overflow or compare)
	 */
	if(Config_Ptr->mode==Timer1_compareMode)
  98:	e9 81       	ldd	r30, Y+1	; 0x01
  9a:	fa 81       	ldd	r31, Y+2	; 0x02
  9c:	85 81       	ldd	r24, Z+5	; 0x05
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	49 f4       	brne	.+18     	; 0xb4 <Timer1_init+0x38>
	TIMSK=(TIMSK&(~0x30))|(1<<OCIE1A);
  a2:	a9 e5       	ldi	r26, 0x59	; 89
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	e9 e5       	ldi	r30, 0x59	; 89
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 7c       	andi	r24, 0xCF	; 207
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	8c 93       	st	X, r24
  b2:	08 c0       	rjmp	.+16     	; 0xc4 <Timer1_init+0x48>
	else TIMSK=(TIMSK&(~0x30))|(1<<TOIE1);
  b4:	a9 e5       	ldi	r26, 0x59	; 89
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	e9 e5       	ldi	r30, 0x59	; 89
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	8b 7c       	andi	r24, 0xCB	; 203
  c0:	84 60       	ori	r24, 0x04	; 4
  c2:	8c 93       	st	X, r24
	/*
	 * setting timer initial value
	 */
	TCNT1=Config_Ptr->initial_value;
  c4:	ac e4       	ldi	r26, 0x4C	; 76
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	e9 81       	ldd	r30, Y+1	; 0x01
  ca:	fa 81       	ldd	r31, Y+2	; 0x02
  cc:	80 81       	ld	r24, Z
  ce:	91 81       	ldd	r25, Z+1	; 0x01
  d0:	11 96       	adiw	r26, 0x01	; 1
  d2:	9c 93       	st	X, r25
  d4:	8e 93       	st	-X, r24
	TCCR1A = (1<<FOC1A)| (1<<FOC1B);
  d6:	ef e4       	ldi	r30, 0x4F	; 79
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	8c e0       	ldi	r24, 0x0C	; 12
  dc:	80 83       	st	Z, r24
	/*
	 * choosing operation mode
	 */
	TCCR1B = (TCCR1B&(~(1<<WGM12)))|(Config_Ptr->mode<<WGM12);
  de:	ae e4       	ldi	r26, 0x4E	; 78
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	ee e4       	ldi	r30, 0x4E	; 78
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	28 2f       	mov	r18, r24
  ea:	27 7f       	andi	r18, 0xF7	; 247
  ec:	e9 81       	ldd	r30, Y+1	; 0x01
  ee:	fa 81       	ldd	r31, Y+2	; 0x02
  f0:	85 81       	ldd	r24, Z+5	; 0x05
  f2:	88 2f       	mov	r24, r24
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	82 2b       	or	r24, r18
 104:	8c 93       	st	X, r24
	/*
	 * setting compare value if in compare mode
	 */
	if(Config_Ptr->mode==Timer1_compareMode){
 106:	e9 81       	ldd	r30, Y+1	; 0x01
 108:	fa 81       	ldd	r31, Y+2	; 0x02
 10a:	85 81       	ldd	r24, Z+5	; 0x05
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	51 f4       	brne	.+20     	; 0x124 <Timer1_init+0xa8>
		OCR1A=Config_Ptr->compare_value;
 110:	ea e4       	ldi	r30, 0x4A	; 74
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	a9 81       	ldd	r26, Y+1	; 0x01
 116:	ba 81       	ldd	r27, Y+2	; 0x02
 118:	12 96       	adiw	r26, 0x02	; 2
 11a:	8d 91       	ld	r24, X+
 11c:	9c 91       	ld	r25, X
 11e:	13 97       	sbiw	r26, 0x03	; 3
 120:	91 83       	std	Z+1, r25	; 0x01
 122:	80 83       	st	Z, r24
	}
	/*
	 * setting pre-scaler
	 */
	TCCR1B = (TCCR1B&(~((1<<CS12)|(1<<CS11)|(1<<CS10))))|(Config_Ptr->prescaler);
 124:	ae e4       	ldi	r26, 0x4E	; 78
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	ee e4       	ldi	r30, 0x4E	; 78
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	98 2f       	mov	r25, r24
 130:	98 7f       	andi	r25, 0xF8	; 248
 132:	e9 81       	ldd	r30, Y+1	; 0x01
 134:	fa 81       	ldd	r31, Y+2	; 0x02
 136:	84 81       	ldd	r24, Z+4	; 0x04
 138:	89 2b       	or	r24, r25
 13a:	8c 93       	st	X, r24

}
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	cf 91       	pop	r28
 142:	df 91       	pop	r29
 144:	08 95       	ret

00000146 <Timer1_deInit>:
/*
 * this function is made to de-initialze timer 1
 */
void Timer1_deInit(void){
 146:	df 93       	push	r29
 148:	cf 93       	push	r28
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = TCCR1B&(~((1<<CS12)|(1<<CS11)|(1<<CS10)));
 14e:	ae e4       	ldi	r26, 0x4E	; 78
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	ee e4       	ldi	r30, 0x4E	; 78
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	88 7f       	andi	r24, 0xF8	; 248
 15a:	8c 93       	st	X, r24
}
 15c:	cf 91       	pop	r28
 15e:	df 91       	pop	r29
 160:	08 95       	ret

00000162 <Timer1_setCallBack>:
/*
 * this function is made to set the callback that will be called when timer fire
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
 162:	df 93       	push	r29
 164:	cf 93       	push	r28
 166:	00 d0       	rcall	.+0      	; 0x168 <Timer1_setCallBack+0x6>
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	9a 83       	std	Y+2, r25	; 0x02
 16e:	89 83       	std	Y+1, r24	; 0x01
	callback=a_ptr;
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	9a 81       	ldd	r25, Y+2	; 0x02
 174:	90 93 61 00 	sts	0x0061, r25
 178:	80 93 60 00 	sts	0x0060, r24
}
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	cf 91       	pop	r28
 182:	df 91       	pop	r29
 184:	08 95       	ret

00000186 <__vector_7>:
ISR(TIMER1_COMPA_vect){
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	5f 93       	push	r21
 198:	6f 93       	push	r22
 19a:	7f 93       	push	r23
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
 1a8:	df 93       	push	r29
 1aa:	cf 93       	push	r28
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
	if(callback!=NULL_PTR)
 1b0:	80 91 60 00 	lds	r24, 0x0060
 1b4:	90 91 61 00 	lds	r25, 0x0061
 1b8:	00 97       	sbiw	r24, 0x00	; 0
 1ba:	29 f0       	breq	.+10     	; 0x1c6 <__vector_7+0x40>
	{
	callback();
 1bc:	e0 91 60 00 	lds	r30, 0x0060
 1c0:	f0 91 61 00 	lds	r31, 0x0061
 1c4:	09 95       	icall
	}
}
 1c6:	cf 91       	pop	r28
 1c8:	df 91       	pop	r29
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	bf 91       	pop	r27
 1d0:	af 91       	pop	r26
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	7f 91       	pop	r23
 1d8:	6f 91       	pop	r22
 1da:	5f 91       	pop	r21
 1dc:	4f 91       	pop	r20
 1de:	3f 91       	pop	r19
 1e0:	2f 91       	pop	r18
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <__vector_9>:
ISR(TIMER1_OVF_vect){
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	2f 93       	push	r18
 1f8:	3f 93       	push	r19
 1fa:	4f 93       	push	r20
 1fc:	5f 93       	push	r21
 1fe:	6f 93       	push	r22
 200:	7f 93       	push	r23
 202:	8f 93       	push	r24
 204:	9f 93       	push	r25
 206:	af 93       	push	r26
 208:	bf 93       	push	r27
 20a:	ef 93       	push	r30
 20c:	ff 93       	push	r31
 20e:	df 93       	push	r29
 210:	cf 93       	push	r28
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
	if(callback!=NULL_PTR)
 216:	80 91 60 00 	lds	r24, 0x0060
 21a:	90 91 61 00 	lds	r25, 0x0061
 21e:	00 97       	sbiw	r24, 0x00	; 0
 220:	29 f0       	breq	.+10     	; 0x22c <__vector_9+0x40>
		{
		callback();
 222:	e0 91 60 00 	lds	r30, 0x0060
 226:	f0 91 61 00 	lds	r31, 0x0061
 22a:	09 95       	icall
		}
}
 22c:	cf 91       	pop	r28
 22e:	df 91       	pop	r29
 230:	ff 91       	pop	r31
 232:	ef 91       	pop	r30
 234:	bf 91       	pop	r27
 236:	af 91       	pop	r26
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
 23c:	7f 91       	pop	r23
 23e:	6f 91       	pop	r22
 240:	5f 91       	pop	r21
 242:	4f 91       	pop	r20
 244:	3f 91       	pop	r19
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <__vector_1>:
#include "../gpio_module/gpio.h"
#include "../std_types.h"
/*global variable to carry the address of the callback function*/
void (*g_fun_ptr)(void)=NULL_PTR;
/*this function will be called if the interrupt is fired*/
ISR(INT0_vect){
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	2f 93       	push	r18
 25e:	3f 93       	push	r19
 260:	4f 93       	push	r20
 262:	5f 93       	push	r21
 264:	6f 93       	push	r22
 266:	7f 93       	push	r23
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	af 93       	push	r26
 26e:	bf 93       	push	r27
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
 274:	df 93       	push	r29
 276:	cf 93       	push	r28
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
if(g_fun_ptr!=NULL_PTR){
 27c:	80 91 62 00 	lds	r24, 0x0062
 280:	90 91 63 00 	lds	r25, 0x0063
 284:	00 97       	sbiw	r24, 0x00	; 0
 286:	29 f0       	breq	.+10     	; 0x292 <__vector_1+0x40>
	g_fun_ptr();
 288:	e0 91 62 00 	lds	r30, 0x0062
 28c:	f0 91 63 00 	lds	r31, 0x0063
 290:	09 95       	icall
}
}
 292:	cf 91       	pop	r28
 294:	df 91       	pop	r29
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	7f 91       	pop	r23
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	3f 91       	pop	r19
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <PUSHBUTTON_init>:
/*this function is to initialize the push button*/
void PUSHBUTTON_init(PUSHBUTTON_interruptEvent event){
 2b8:	df 93       	push	r29
 2ba:	cf 93       	push	r28
 2bc:	0f 92       	push	r0
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	89 83       	std	Y+1, r24	; 0x01
	/*enabling global interrupts*/
	SREG  |= (1<<7);
 2c4:	af e5       	ldi	r26, 0x5F	; 95
 2c6:	b0 e0       	ldi	r27, 0x00	; 0
 2c8:	ef e5       	ldi	r30, 0x5F	; 95
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	80 68       	ori	r24, 0x80	; 128
 2d0:	8c 93       	st	X, r24
	/*setting PD2-INT0 as input pin*/
	GPIO_setupPinDirection(PORTD_ID, PIN2_ID, PIN_INPUT);
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	62 e0       	ldi	r22, 0x02	; 2
 2d6:	40 e0       	ldi	r20, 0x00	; 0
 2d8:	0e 94 95 01 	call	0x32a	; 0x32a <GPIO_setupPinDirection>
	/*setting INT0 at raising edge*/
	MCUCR = (MCUCR &~((1<<ISC01)|(1<<ISC00)))|(event);
 2dc:	a5 e5       	ldi	r26, 0x55	; 85
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	e5 e5       	ldi	r30, 0x55	; 85
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	98 2f       	mov	r25, r24
 2e8:	9c 7f       	andi	r25, 0xFC	; 252
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
 2ec:	89 2b       	or	r24, r25
 2ee:	8c 93       	st	X, r24
	/*enabling external interrupt INT0*/
	GICR  |= (1<<INT0);
 2f0:	ab e5       	ldi	r26, 0x5B	; 91
 2f2:	b0 e0       	ldi	r27, 0x00	; 0
 2f4:	eb e5       	ldi	r30, 0x5B	; 91
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	80 64       	ori	r24, 0x40	; 64
 2fc:	8c 93       	st	X, r24
	return;
}
 2fe:	0f 90       	pop	r0
 300:	cf 91       	pop	r28
 302:	df 91       	pop	r29
 304:	08 95       	ret

00000306 <PUSHBUTTON_setISR>:
/*this function is to set the ISR of the button*/
void PUSHBUTTON_setISR( void (*fun_ptr)(void)){
 306:	df 93       	push	r29
 308:	cf 93       	push	r28
 30a:	00 d0       	rcall	.+0      	; 0x30c <PUSHBUTTON_setISR+0x6>
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	9a 83       	std	Y+2, r25	; 0x02
 312:	89 83       	std	Y+1, r24	; 0x01
	g_fun_ptr=fun_ptr;
 314:	89 81       	ldd	r24, Y+1	; 0x01
 316:	9a 81       	ldd	r25, Y+2	; 0x02
 318:	90 93 63 00 	sts	0x0063, r25
 31c:	80 93 62 00 	sts	0x0062, r24
}
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	cf 91       	pop	r28
 326:	df 91       	pop	r29
 328:	08 95       	ret

0000032a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
 32a:	df 93       	push	r29
 32c:	cf 93       	push	r28
 32e:	00 d0       	rcall	.+0      	; 0x330 <GPIO_setupPinDirection+0x6>
 330:	00 d0       	rcall	.+0      	; 0x332 <GPIO_setupPinDirection+0x8>
 332:	0f 92       	push	r0
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	89 83       	std	Y+1, r24	; 0x01
 33a:	6a 83       	std	Y+2, r22	; 0x02
 33c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 33e:	8a 81       	ldd	r24, Y+2	; 0x02
 340:	88 30       	cpi	r24, 0x08	; 8
 342:	08 f0       	brcs	.+2      	; 0x346 <GPIO_setupPinDirection+0x1c>
 344:	d5 c0       	rjmp	.+426    	; 0x4f0 <GPIO_setupPinDirection+0x1c6>
 346:	89 81       	ldd	r24, Y+1	; 0x01
 348:	84 30       	cpi	r24, 0x04	; 4
 34a:	08 f0       	brcs	.+2      	; 0x34e <GPIO_setupPinDirection+0x24>
 34c:	d1 c0       	rjmp	.+418    	; 0x4f0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
 34e:	89 81       	ldd	r24, Y+1	; 0x01
 350:	28 2f       	mov	r18, r24
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	3d 83       	std	Y+5, r19	; 0x05
 356:	2c 83       	std	Y+4, r18	; 0x04
 358:	8c 81       	ldd	r24, Y+4	; 0x04
 35a:	9d 81       	ldd	r25, Y+5	; 0x05
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	91 05       	cpc	r25, r1
 360:	09 f4       	brne	.+2      	; 0x364 <GPIO_setupPinDirection+0x3a>
 362:	43 c0       	rjmp	.+134    	; 0x3ea <GPIO_setupPinDirection+0xc0>
 364:	2c 81       	ldd	r18, Y+4	; 0x04
 366:	3d 81       	ldd	r19, Y+5	; 0x05
 368:	22 30       	cpi	r18, 0x02	; 2
 36a:	31 05       	cpc	r19, r1
 36c:	2c f4       	brge	.+10     	; 0x378 <GPIO_setupPinDirection+0x4e>
 36e:	8c 81       	ldd	r24, Y+4	; 0x04
 370:	9d 81       	ldd	r25, Y+5	; 0x05
 372:	00 97       	sbiw	r24, 0x00	; 0
 374:	71 f0       	breq	.+28     	; 0x392 <GPIO_setupPinDirection+0x68>
 376:	bc c0       	rjmp	.+376    	; 0x4f0 <GPIO_setupPinDirection+0x1c6>
 378:	2c 81       	ldd	r18, Y+4	; 0x04
 37a:	3d 81       	ldd	r19, Y+5	; 0x05
 37c:	22 30       	cpi	r18, 0x02	; 2
 37e:	31 05       	cpc	r19, r1
 380:	09 f4       	brne	.+2      	; 0x384 <GPIO_setupPinDirection+0x5a>
 382:	5f c0       	rjmp	.+190    	; 0x442 <GPIO_setupPinDirection+0x118>
 384:	8c 81       	ldd	r24, Y+4	; 0x04
 386:	9d 81       	ldd	r25, Y+5	; 0x05
 388:	83 30       	cpi	r24, 0x03	; 3
 38a:	91 05       	cpc	r25, r1
 38c:	09 f4       	brne	.+2      	; 0x390 <GPIO_setupPinDirection+0x66>
 38e:	85 c0       	rjmp	.+266    	; 0x49a <GPIO_setupPinDirection+0x170>
 390:	af c0       	rjmp	.+350    	; 0x4f0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
 392:	8b 81       	ldd	r24, Y+3	; 0x03
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	a1 f4       	brne	.+40     	; 0x3c0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
 398:	aa e3       	ldi	r26, 0x3A	; 58
 39a:	b0 e0       	ldi	r27, 0x00	; 0
 39c:	ea e3       	ldi	r30, 0x3A	; 58
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	48 2f       	mov	r20, r24
 3a4:	8a 81       	ldd	r24, Y+2	; 0x02
 3a6:	28 2f       	mov	r18, r24
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 2e       	mov	r0, r18
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <GPIO_setupPinDirection+0x8c>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	0a 94       	dec	r0
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <GPIO_setupPinDirection+0x88>
 3ba:	84 2b       	or	r24, r20
 3bc:	8c 93       	st	X, r24
 3be:	98 c0       	rjmp	.+304    	; 0x4f0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 3c0:	aa e3       	ldi	r26, 0x3A	; 58
 3c2:	b0 e0       	ldi	r27, 0x00	; 0
 3c4:	ea e3       	ldi	r30, 0x3A	; 58
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	48 2f       	mov	r20, r24
 3cc:	8a 81       	ldd	r24, Y+2	; 0x02
 3ce:	28 2f       	mov	r18, r24
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 2e       	mov	r0, r18
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <GPIO_setupPinDirection+0xb4>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	0a 94       	dec	r0
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <GPIO_setupPinDirection+0xb0>
 3e2:	80 95       	com	r24
 3e4:	84 23       	and	r24, r20
 3e6:	8c 93       	st	X, r24
 3e8:	83 c0       	rjmp	.+262    	; 0x4f0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 3ea:	8b 81       	ldd	r24, Y+3	; 0x03
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	a1 f4       	brne	.+40     	; 0x418 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
 3f0:	a7 e3       	ldi	r26, 0x37	; 55
 3f2:	b0 e0       	ldi	r27, 0x00	; 0
 3f4:	e7 e3       	ldi	r30, 0x37	; 55
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	48 2f       	mov	r20, r24
 3fc:	8a 81       	ldd	r24, Y+2	; 0x02
 3fe:	28 2f       	mov	r18, r24
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 2e       	mov	r0, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <GPIO_setupPinDirection+0xe4>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	0a 94       	dec	r0
 410:	e2 f7       	brpl	.-8      	; 0x40a <GPIO_setupPinDirection+0xe0>
 412:	84 2b       	or	r24, r20
 414:	8c 93       	st	X, r24
 416:	6c c0       	rjmp	.+216    	; 0x4f0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 418:	a7 e3       	ldi	r26, 0x37	; 55
 41a:	b0 e0       	ldi	r27, 0x00	; 0
 41c:	e7 e3       	ldi	r30, 0x37	; 55
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	48 2f       	mov	r20, r24
 424:	8a 81       	ldd	r24, Y+2	; 0x02
 426:	28 2f       	mov	r18, r24
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 2e       	mov	r0, r18
 430:	02 c0       	rjmp	.+4      	; 0x436 <GPIO_setupPinDirection+0x10c>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	0a 94       	dec	r0
 438:	e2 f7       	brpl	.-8      	; 0x432 <GPIO_setupPinDirection+0x108>
 43a:	80 95       	com	r24
 43c:	84 23       	and	r24, r20
 43e:	8c 93       	st	X, r24
 440:	57 c0       	rjmp	.+174    	; 0x4f0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 442:	8b 81       	ldd	r24, Y+3	; 0x03
 444:	81 30       	cpi	r24, 0x01	; 1
 446:	a1 f4       	brne	.+40     	; 0x470 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
 448:	a4 e3       	ldi	r26, 0x34	; 52
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 44c:	e4 e3       	ldi	r30, 0x34	; 52
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	48 2f       	mov	r20, r24
 454:	8a 81       	ldd	r24, Y+2	; 0x02
 456:	28 2f       	mov	r18, r24
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 2e       	mov	r0, r18
 460:	02 c0       	rjmp	.+4      	; 0x466 <GPIO_setupPinDirection+0x13c>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	0a 94       	dec	r0
 468:	e2 f7       	brpl	.-8      	; 0x462 <GPIO_setupPinDirection+0x138>
 46a:	84 2b       	or	r24, r20
 46c:	8c 93       	st	X, r24
 46e:	40 c0       	rjmp	.+128    	; 0x4f0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 470:	a4 e3       	ldi	r26, 0x34	; 52
 472:	b0 e0       	ldi	r27, 0x00	; 0
 474:	e4 e3       	ldi	r30, 0x34	; 52
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	48 2f       	mov	r20, r24
 47c:	8a 81       	ldd	r24, Y+2	; 0x02
 47e:	28 2f       	mov	r18, r24
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 2e       	mov	r0, r18
 488:	02 c0       	rjmp	.+4      	; 0x48e <GPIO_setupPinDirection+0x164>
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	0a 94       	dec	r0
 490:	e2 f7       	brpl	.-8      	; 0x48a <GPIO_setupPinDirection+0x160>
 492:	80 95       	com	r24
 494:	84 23       	and	r24, r20
 496:	8c 93       	st	X, r24
 498:	2b c0       	rjmp	.+86     	; 0x4f0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 49a:	8b 81       	ldd	r24, Y+3	; 0x03
 49c:	81 30       	cpi	r24, 0x01	; 1
 49e:	a1 f4       	brne	.+40     	; 0x4c8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
 4a0:	a1 e3       	ldi	r26, 0x31	; 49
 4a2:	b0 e0       	ldi	r27, 0x00	; 0
 4a4:	e1 e3       	ldi	r30, 0x31	; 49
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	48 2f       	mov	r20, r24
 4ac:	8a 81       	ldd	r24, Y+2	; 0x02
 4ae:	28 2f       	mov	r18, r24
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	02 2e       	mov	r0, r18
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <GPIO_setupPinDirection+0x194>
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	0a 94       	dec	r0
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <GPIO_setupPinDirection+0x190>
 4c2:	84 2b       	or	r24, r20
 4c4:	8c 93       	st	X, r24
 4c6:	14 c0       	rjmp	.+40     	; 0x4f0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 4c8:	a1 e3       	ldi	r26, 0x31	; 49
 4ca:	b0 e0       	ldi	r27, 0x00	; 0
 4cc:	e1 e3       	ldi	r30, 0x31	; 49
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	80 81       	ld	r24, Z
 4d2:	48 2f       	mov	r20, r24
 4d4:	8a 81       	ldd	r24, Y+2	; 0x02
 4d6:	28 2f       	mov	r18, r24
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 2e       	mov	r0, r18
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <GPIO_setupPinDirection+0x1bc>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	0a 94       	dec	r0
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <GPIO_setupPinDirection+0x1b8>
 4ea:	80 95       	com	r24
 4ec:	84 23       	and	r24, r20
 4ee:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 4f0:	0f 90       	pop	r0
 4f2:	0f 90       	pop	r0
 4f4:	0f 90       	pop	r0
 4f6:	0f 90       	pop	r0
 4f8:	0f 90       	pop	r0
 4fa:	cf 91       	pop	r28
 4fc:	df 91       	pop	r29
 4fe:	08 95       	ret

00000500 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
 500:	df 93       	push	r29
 502:	cf 93       	push	r28
 504:	00 d0       	rcall	.+0      	; 0x506 <GPIO_writePin+0x6>
 506:	00 d0       	rcall	.+0      	; 0x508 <GPIO_writePin+0x8>
 508:	0f 92       	push	r0
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
 50e:	89 83       	std	Y+1, r24	; 0x01
 510:	6a 83       	std	Y+2, r22	; 0x02
 512:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 514:	8a 81       	ldd	r24, Y+2	; 0x02
 516:	88 30       	cpi	r24, 0x08	; 8
 518:	08 f0       	brcs	.+2      	; 0x51c <GPIO_writePin+0x1c>
 51a:	d5 c0       	rjmp	.+426    	; 0x6c6 <GPIO_writePin+0x1c6>
 51c:	89 81       	ldd	r24, Y+1	; 0x01
 51e:	84 30       	cpi	r24, 0x04	; 4
 520:	08 f0       	brcs	.+2      	; 0x524 <GPIO_writePin+0x24>
 522:	d1 c0       	rjmp	.+418    	; 0x6c6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
 524:	89 81       	ldd	r24, Y+1	; 0x01
 526:	28 2f       	mov	r18, r24
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	3d 83       	std	Y+5, r19	; 0x05
 52c:	2c 83       	std	Y+4, r18	; 0x04
 52e:	8c 81       	ldd	r24, Y+4	; 0x04
 530:	9d 81       	ldd	r25, Y+5	; 0x05
 532:	81 30       	cpi	r24, 0x01	; 1
 534:	91 05       	cpc	r25, r1
 536:	09 f4       	brne	.+2      	; 0x53a <GPIO_writePin+0x3a>
 538:	43 c0       	rjmp	.+134    	; 0x5c0 <GPIO_writePin+0xc0>
 53a:	2c 81       	ldd	r18, Y+4	; 0x04
 53c:	3d 81       	ldd	r19, Y+5	; 0x05
 53e:	22 30       	cpi	r18, 0x02	; 2
 540:	31 05       	cpc	r19, r1
 542:	2c f4       	brge	.+10     	; 0x54e <GPIO_writePin+0x4e>
 544:	8c 81       	ldd	r24, Y+4	; 0x04
 546:	9d 81       	ldd	r25, Y+5	; 0x05
 548:	00 97       	sbiw	r24, 0x00	; 0
 54a:	71 f0       	breq	.+28     	; 0x568 <GPIO_writePin+0x68>
 54c:	bc c0       	rjmp	.+376    	; 0x6c6 <GPIO_writePin+0x1c6>
 54e:	2c 81       	ldd	r18, Y+4	; 0x04
 550:	3d 81       	ldd	r19, Y+5	; 0x05
 552:	22 30       	cpi	r18, 0x02	; 2
 554:	31 05       	cpc	r19, r1
 556:	09 f4       	brne	.+2      	; 0x55a <GPIO_writePin+0x5a>
 558:	5f c0       	rjmp	.+190    	; 0x618 <GPIO_writePin+0x118>
 55a:	8c 81       	ldd	r24, Y+4	; 0x04
 55c:	9d 81       	ldd	r25, Y+5	; 0x05
 55e:	83 30       	cpi	r24, 0x03	; 3
 560:	91 05       	cpc	r25, r1
 562:	09 f4       	brne	.+2      	; 0x566 <GPIO_writePin+0x66>
 564:	85 c0       	rjmp	.+266    	; 0x670 <GPIO_writePin+0x170>
 566:	af c0       	rjmp	.+350    	; 0x6c6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 568:	8b 81       	ldd	r24, Y+3	; 0x03
 56a:	81 30       	cpi	r24, 0x01	; 1
 56c:	a1 f4       	brne	.+40     	; 0x596 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
 56e:	ab e3       	ldi	r26, 0x3B	; 59
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	eb e3       	ldi	r30, 0x3B	; 59
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	80 81       	ld	r24, Z
 578:	48 2f       	mov	r20, r24
 57a:	8a 81       	ldd	r24, Y+2	; 0x02
 57c:	28 2f       	mov	r18, r24
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	02 2e       	mov	r0, r18
 586:	02 c0       	rjmp	.+4      	; 0x58c <GPIO_writePin+0x8c>
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	0a 94       	dec	r0
 58e:	e2 f7       	brpl	.-8      	; 0x588 <GPIO_writePin+0x88>
 590:	84 2b       	or	r24, r20
 592:	8c 93       	st	X, r24
 594:	98 c0       	rjmp	.+304    	; 0x6c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 596:	ab e3       	ldi	r26, 0x3B	; 59
 598:	b0 e0       	ldi	r27, 0x00	; 0
 59a:	eb e3       	ldi	r30, 0x3B	; 59
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	80 81       	ld	r24, Z
 5a0:	48 2f       	mov	r20, r24
 5a2:	8a 81       	ldd	r24, Y+2	; 0x02
 5a4:	28 2f       	mov	r18, r24
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	02 2e       	mov	r0, r18
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <GPIO_writePin+0xb4>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	0a 94       	dec	r0
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <GPIO_writePin+0xb0>
 5b8:	80 95       	com	r24
 5ba:	84 23       	and	r24, r20
 5bc:	8c 93       	st	X, r24
 5be:	83 c0       	rjmp	.+262    	; 0x6c6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 5c0:	8b 81       	ldd	r24, Y+3	; 0x03
 5c2:	81 30       	cpi	r24, 0x01	; 1
 5c4:	a1 f4       	brne	.+40     	; 0x5ee <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
 5c6:	a8 e3       	ldi	r26, 0x38	; 56
 5c8:	b0 e0       	ldi	r27, 0x00	; 0
 5ca:	e8 e3       	ldi	r30, 0x38	; 56
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
 5d0:	48 2f       	mov	r20, r24
 5d2:	8a 81       	ldd	r24, Y+2	; 0x02
 5d4:	28 2f       	mov	r18, r24
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	02 2e       	mov	r0, r18
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <GPIO_writePin+0xe4>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	0a 94       	dec	r0
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <GPIO_writePin+0xe0>
 5e8:	84 2b       	or	r24, r20
 5ea:	8c 93       	st	X, r24
 5ec:	6c c0       	rjmp	.+216    	; 0x6c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 5ee:	a8 e3       	ldi	r26, 0x38	; 56
 5f0:	b0 e0       	ldi	r27, 0x00	; 0
 5f2:	e8 e3       	ldi	r30, 0x38	; 56
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	80 81       	ld	r24, Z
 5f8:	48 2f       	mov	r20, r24
 5fa:	8a 81       	ldd	r24, Y+2	; 0x02
 5fc:	28 2f       	mov	r18, r24
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	02 2e       	mov	r0, r18
 606:	02 c0       	rjmp	.+4      	; 0x60c <GPIO_writePin+0x10c>
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	0a 94       	dec	r0
 60e:	e2 f7       	brpl	.-8      	; 0x608 <GPIO_writePin+0x108>
 610:	80 95       	com	r24
 612:	84 23       	and	r24, r20
 614:	8c 93       	st	X, r24
 616:	57 c0       	rjmp	.+174    	; 0x6c6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 618:	8b 81       	ldd	r24, Y+3	; 0x03
 61a:	81 30       	cpi	r24, 0x01	; 1
 61c:	a1 f4       	brne	.+40     	; 0x646 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
 61e:	a5 e3       	ldi	r26, 0x35	; 53
 620:	b0 e0       	ldi	r27, 0x00	; 0
 622:	e5 e3       	ldi	r30, 0x35	; 53
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	80 81       	ld	r24, Z
 628:	48 2f       	mov	r20, r24
 62a:	8a 81       	ldd	r24, Y+2	; 0x02
 62c:	28 2f       	mov	r18, r24
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	02 2e       	mov	r0, r18
 636:	02 c0       	rjmp	.+4      	; 0x63c <GPIO_writePin+0x13c>
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	0a 94       	dec	r0
 63e:	e2 f7       	brpl	.-8      	; 0x638 <GPIO_writePin+0x138>
 640:	84 2b       	or	r24, r20
 642:	8c 93       	st	X, r24
 644:	40 c0       	rjmp	.+128    	; 0x6c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 646:	a5 e3       	ldi	r26, 0x35	; 53
 648:	b0 e0       	ldi	r27, 0x00	; 0
 64a:	e5 e3       	ldi	r30, 0x35	; 53
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	80 81       	ld	r24, Z
 650:	48 2f       	mov	r20, r24
 652:	8a 81       	ldd	r24, Y+2	; 0x02
 654:	28 2f       	mov	r18, r24
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	02 2e       	mov	r0, r18
 65e:	02 c0       	rjmp	.+4      	; 0x664 <GPIO_writePin+0x164>
 660:	88 0f       	add	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	0a 94       	dec	r0
 666:	e2 f7       	brpl	.-8      	; 0x660 <GPIO_writePin+0x160>
 668:	80 95       	com	r24
 66a:	84 23       	and	r24, r20
 66c:	8c 93       	st	X, r24
 66e:	2b c0       	rjmp	.+86     	; 0x6c6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 670:	8b 81       	ldd	r24, Y+3	; 0x03
 672:	81 30       	cpi	r24, 0x01	; 1
 674:	a1 f4       	brne	.+40     	; 0x69e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
 676:	a2 e3       	ldi	r26, 0x32	; 50
 678:	b0 e0       	ldi	r27, 0x00	; 0
 67a:	e2 e3       	ldi	r30, 0x32	; 50
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	80 81       	ld	r24, Z
 680:	48 2f       	mov	r20, r24
 682:	8a 81       	ldd	r24, Y+2	; 0x02
 684:	28 2f       	mov	r18, r24
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	02 2e       	mov	r0, r18
 68e:	02 c0       	rjmp	.+4      	; 0x694 <GPIO_writePin+0x194>
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	0a 94       	dec	r0
 696:	e2 f7       	brpl	.-8      	; 0x690 <GPIO_writePin+0x190>
 698:	84 2b       	or	r24, r20
 69a:	8c 93       	st	X, r24
 69c:	14 c0       	rjmp	.+40     	; 0x6c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 69e:	a2 e3       	ldi	r26, 0x32	; 50
 6a0:	b0 e0       	ldi	r27, 0x00	; 0
 6a2:	e2 e3       	ldi	r30, 0x32	; 50
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	80 81       	ld	r24, Z
 6a8:	48 2f       	mov	r20, r24
 6aa:	8a 81       	ldd	r24, Y+2	; 0x02
 6ac:	28 2f       	mov	r18, r24
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	02 2e       	mov	r0, r18
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <GPIO_writePin+0x1bc>
 6b8:	88 0f       	add	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	0a 94       	dec	r0
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <GPIO_writePin+0x1b8>
 6c0:	80 95       	com	r24
 6c2:	84 23       	and	r24, r20
 6c4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 6c6:	0f 90       	pop	r0
 6c8:	0f 90       	pop	r0
 6ca:	0f 90       	pop	r0
 6cc:	0f 90       	pop	r0
 6ce:	0f 90       	pop	r0
 6d0:	cf 91       	pop	r28
 6d2:	df 91       	pop	r29
 6d4:	08 95       	ret

000006d6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
 6d6:	df 93       	push	r29
 6d8:	cf 93       	push	r28
 6da:	00 d0       	rcall	.+0      	; 0x6dc <GPIO_readPin+0x6>
 6dc:	00 d0       	rcall	.+0      	; 0x6de <GPIO_readPin+0x8>
 6de:	0f 92       	push	r0
 6e0:	cd b7       	in	r28, 0x3d	; 61
 6e2:	de b7       	in	r29, 0x3e	; 62
 6e4:	8a 83       	std	Y+2, r24	; 0x02
 6e6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
 6e8:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 6ea:	8b 81       	ldd	r24, Y+3	; 0x03
 6ec:	88 30       	cpi	r24, 0x08	; 8
 6ee:	08 f0       	brcs	.+2      	; 0x6f2 <GPIO_readPin+0x1c>
 6f0:	84 c0       	rjmp	.+264    	; 0x7fa <GPIO_readPin+0x124>
 6f2:	8a 81       	ldd	r24, Y+2	; 0x02
 6f4:	84 30       	cpi	r24, 0x04	; 4
 6f6:	08 f0       	brcs	.+2      	; 0x6fa <GPIO_readPin+0x24>
 6f8:	80 c0       	rjmp	.+256    	; 0x7fa <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
 6fa:	8a 81       	ldd	r24, Y+2	; 0x02
 6fc:	28 2f       	mov	r18, r24
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	3d 83       	std	Y+5, r19	; 0x05
 702:	2c 83       	std	Y+4, r18	; 0x04
 704:	4c 81       	ldd	r20, Y+4	; 0x04
 706:	5d 81       	ldd	r21, Y+5	; 0x05
 708:	41 30       	cpi	r20, 0x01	; 1
 70a:	51 05       	cpc	r21, r1
 70c:	79 f1       	breq	.+94     	; 0x76c <GPIO_readPin+0x96>
 70e:	8c 81       	ldd	r24, Y+4	; 0x04
 710:	9d 81       	ldd	r25, Y+5	; 0x05
 712:	82 30       	cpi	r24, 0x02	; 2
 714:	91 05       	cpc	r25, r1
 716:	34 f4       	brge	.+12     	; 0x724 <GPIO_readPin+0x4e>
 718:	2c 81       	ldd	r18, Y+4	; 0x04
 71a:	3d 81       	ldd	r19, Y+5	; 0x05
 71c:	21 15       	cp	r18, r1
 71e:	31 05       	cpc	r19, r1
 720:	69 f0       	breq	.+26     	; 0x73c <GPIO_readPin+0x66>
 722:	6b c0       	rjmp	.+214    	; 0x7fa <GPIO_readPin+0x124>
 724:	4c 81       	ldd	r20, Y+4	; 0x04
 726:	5d 81       	ldd	r21, Y+5	; 0x05
 728:	42 30       	cpi	r20, 0x02	; 2
 72a:	51 05       	cpc	r21, r1
 72c:	b9 f1       	breq	.+110    	; 0x79c <GPIO_readPin+0xc6>
 72e:	8c 81       	ldd	r24, Y+4	; 0x04
 730:	9d 81       	ldd	r25, Y+5	; 0x05
 732:	83 30       	cpi	r24, 0x03	; 3
 734:	91 05       	cpc	r25, r1
 736:	09 f4       	brne	.+2      	; 0x73a <GPIO_readPin+0x64>
 738:	49 c0       	rjmp	.+146    	; 0x7cc <GPIO_readPin+0xf6>
 73a:	5f c0       	rjmp	.+190    	; 0x7fa <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 73c:	e9 e3       	ldi	r30, 0x39	; 57
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	80 81       	ld	r24, Z
 742:	28 2f       	mov	r18, r24
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	8b 81       	ldd	r24, Y+3	; 0x03
 748:	88 2f       	mov	r24, r24
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	a9 01       	movw	r20, r18
 74e:	02 c0       	rjmp	.+4      	; 0x754 <GPIO_readPin+0x7e>
 750:	55 95       	asr	r21
 752:	47 95       	ror	r20
 754:	8a 95       	dec	r24
 756:	e2 f7       	brpl	.-8      	; 0x750 <GPIO_readPin+0x7a>
 758:	ca 01       	movw	r24, r20
 75a:	81 70       	andi	r24, 0x01	; 1
 75c:	90 70       	andi	r25, 0x00	; 0
 75e:	88 23       	and	r24, r24
 760:	19 f0       	breq	.+6      	; 0x768 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	89 83       	std	Y+1, r24	; 0x01
 766:	49 c0       	rjmp	.+146    	; 0x7fa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 768:	19 82       	std	Y+1, r1	; 0x01
 76a:	47 c0       	rjmp	.+142    	; 0x7fa <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 76c:	e6 e3       	ldi	r30, 0x36	; 54
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	80 81       	ld	r24, Z
 772:	28 2f       	mov	r18, r24
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	8b 81       	ldd	r24, Y+3	; 0x03
 778:	88 2f       	mov	r24, r24
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	a9 01       	movw	r20, r18
 77e:	02 c0       	rjmp	.+4      	; 0x784 <GPIO_readPin+0xae>
 780:	55 95       	asr	r21
 782:	47 95       	ror	r20
 784:	8a 95       	dec	r24
 786:	e2 f7       	brpl	.-8      	; 0x780 <GPIO_readPin+0xaa>
 788:	ca 01       	movw	r24, r20
 78a:	81 70       	andi	r24, 0x01	; 1
 78c:	90 70       	andi	r25, 0x00	; 0
 78e:	88 23       	and	r24, r24
 790:	19 f0       	breq	.+6      	; 0x798 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	89 83       	std	Y+1, r24	; 0x01
 796:	31 c0       	rjmp	.+98     	; 0x7fa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 798:	19 82       	std	Y+1, r1	; 0x01
 79a:	2f c0       	rjmp	.+94     	; 0x7fa <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 79c:	e3 e3       	ldi	r30, 0x33	; 51
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	80 81       	ld	r24, Z
 7a2:	28 2f       	mov	r18, r24
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	8b 81       	ldd	r24, Y+3	; 0x03
 7a8:	88 2f       	mov	r24, r24
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	a9 01       	movw	r20, r18
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <GPIO_readPin+0xde>
 7b0:	55 95       	asr	r21
 7b2:	47 95       	ror	r20
 7b4:	8a 95       	dec	r24
 7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <GPIO_readPin+0xda>
 7b8:	ca 01       	movw	r24, r20
 7ba:	81 70       	andi	r24, 0x01	; 1
 7bc:	90 70       	andi	r25, 0x00	; 0
 7be:	88 23       	and	r24, r24
 7c0:	19 f0       	breq	.+6      	; 0x7c8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	89 83       	std	Y+1, r24	; 0x01
 7c6:	19 c0       	rjmp	.+50     	; 0x7fa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 7c8:	19 82       	std	Y+1, r1	; 0x01
 7ca:	17 c0       	rjmp	.+46     	; 0x7fa <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 7cc:	e0 e3       	ldi	r30, 0x30	; 48
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	80 81       	ld	r24, Z
 7d2:	28 2f       	mov	r18, r24
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	8b 81       	ldd	r24, Y+3	; 0x03
 7d8:	88 2f       	mov	r24, r24
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	a9 01       	movw	r20, r18
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <GPIO_readPin+0x10e>
 7e0:	55 95       	asr	r21
 7e2:	47 95       	ror	r20
 7e4:	8a 95       	dec	r24
 7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <GPIO_readPin+0x10a>
 7e8:	ca 01       	movw	r24, r20
 7ea:	81 70       	andi	r24, 0x01	; 1
 7ec:	90 70       	andi	r25, 0x00	; 0
 7ee:	88 23       	and	r24, r24
 7f0:	19 f0       	breq	.+6      	; 0x7f8 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	89 83       	std	Y+1, r24	; 0x01
 7f6:	01 c0       	rjmp	.+2      	; 0x7fa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 7f8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
 7fa:	89 81       	ldd	r24, Y+1	; 0x01
}
 7fc:	0f 90       	pop	r0
 7fe:	0f 90       	pop	r0
 800:	0f 90       	pop	r0
 802:	0f 90       	pop	r0
 804:	0f 90       	pop	r0
 806:	cf 91       	pop	r28
 808:	df 91       	pop	r29
 80a:	08 95       	ret

0000080c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
 80c:	df 93       	push	r29
 80e:	cf 93       	push	r28
 810:	00 d0       	rcall	.+0      	; 0x812 <GPIO_setupPortDirection+0x6>
 812:	00 d0       	rcall	.+0      	; 0x814 <GPIO_setupPortDirection+0x8>
 814:	cd b7       	in	r28, 0x3d	; 61
 816:	de b7       	in	r29, 0x3e	; 62
 818:	89 83       	std	Y+1, r24	; 0x01
 81a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 81c:	89 81       	ldd	r24, Y+1	; 0x01
 81e:	84 30       	cpi	r24, 0x04	; 4
 820:	90 f5       	brcc	.+100    	; 0x886 <__stack+0x27>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
 822:	89 81       	ldd	r24, Y+1	; 0x01
 824:	28 2f       	mov	r18, r24
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	3c 83       	std	Y+4, r19	; 0x04
 82a:	2b 83       	std	Y+3, r18	; 0x03
 82c:	8b 81       	ldd	r24, Y+3	; 0x03
 82e:	9c 81       	ldd	r25, Y+4	; 0x04
 830:	81 30       	cpi	r24, 0x01	; 1
 832:	91 05       	cpc	r25, r1
 834:	d1 f0       	breq	.+52     	; 0x86a <__stack+0xb>
 836:	2b 81       	ldd	r18, Y+3	; 0x03
 838:	3c 81       	ldd	r19, Y+4	; 0x04
 83a:	22 30       	cpi	r18, 0x02	; 2
 83c:	31 05       	cpc	r19, r1
 83e:	2c f4       	brge	.+10     	; 0x84a <GPIO_setupPortDirection+0x3e>
 840:	8b 81       	ldd	r24, Y+3	; 0x03
 842:	9c 81       	ldd	r25, Y+4	; 0x04
 844:	00 97       	sbiw	r24, 0x00	; 0
 846:	61 f0       	breq	.+24     	; 0x860 <__stack+0x1>
 848:	1e c0       	rjmp	.+60     	; 0x886 <__stack+0x27>
 84a:	2b 81       	ldd	r18, Y+3	; 0x03
 84c:	3c 81       	ldd	r19, Y+4	; 0x04
 84e:	22 30       	cpi	r18, 0x02	; 2
 850:	31 05       	cpc	r19, r1
 852:	81 f0       	breq	.+32     	; 0x874 <__stack+0x15>
 854:	8b 81       	ldd	r24, Y+3	; 0x03
 856:	9c 81       	ldd	r25, Y+4	; 0x04
 858:	83 30       	cpi	r24, 0x03	; 3
 85a:	91 05       	cpc	r25, r1
 85c:	81 f0       	breq	.+32     	; 0x87e <__stack+0x1f>
 85e:	13 c0       	rjmp	.+38     	; 0x886 <__stack+0x27>
		{
		case PORTA_ID:
			DDRA = direction;
 860:	ea e3       	ldi	r30, 0x3A	; 58
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	8a 81       	ldd	r24, Y+2	; 0x02
 866:	80 83       	st	Z, r24
 868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
			break;
		case PORTB_ID:
			DDRB = direction;
 86a:	e7 e3       	ldi	r30, 0x37	; 55
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	8a 81       	ldd	r24, Y+2	; 0x02
 870:	80 83       	st	Z, r24
 872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
			break;
		case PORTC_ID:
			DDRC = direction;
 874:	e4 e3       	ldi	r30, 0x34	; 52
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	8a 81       	ldd	r24, Y+2	; 0x02
 87a:	80 83       	st	Z, r24
 87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
			break;
		case PORTD_ID:
			DDRD = direction;
 87e:	e1 e3       	ldi	r30, 0x31	; 49
 880:	f0 e0       	ldi	r31, 0x00	; 0
 882:	8a 81       	ldd	r24, Y+2	; 0x02
 884:	80 83       	st	Z, r24
			break;
		}
	}
}
 886:	0f 90       	pop	r0
 888:	0f 90       	pop	r0
 88a:	0f 90       	pop	r0
 88c:	0f 90       	pop	r0
 88e:	cf 91       	pop	r28
 890:	df 91       	pop	r29
 892:	08 95       	ret

00000894 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
 894:	df 93       	push	r29
 896:	cf 93       	push	r28
 898:	00 d0       	rcall	.+0      	; 0x89a <GPIO_writePort+0x6>
 89a:	00 d0       	rcall	.+0      	; 0x89c <GPIO_writePort+0x8>
 89c:	cd b7       	in	r28, 0x3d	; 61
 89e:	de b7       	in	r29, 0x3e	; 62
 8a0:	89 83       	std	Y+1, r24	; 0x01
 8a2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 8a4:	89 81       	ldd	r24, Y+1	; 0x01
 8a6:	84 30       	cpi	r24, 0x04	; 4
 8a8:	90 f5       	brcc	.+100    	; 0x90e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
 8aa:	89 81       	ldd	r24, Y+1	; 0x01
 8ac:	28 2f       	mov	r18, r24
 8ae:	30 e0       	ldi	r19, 0x00	; 0
 8b0:	3c 83       	std	Y+4, r19	; 0x04
 8b2:	2b 83       	std	Y+3, r18	; 0x03
 8b4:	8b 81       	ldd	r24, Y+3	; 0x03
 8b6:	9c 81       	ldd	r25, Y+4	; 0x04
 8b8:	81 30       	cpi	r24, 0x01	; 1
 8ba:	91 05       	cpc	r25, r1
 8bc:	d1 f0       	breq	.+52     	; 0x8f2 <GPIO_writePort+0x5e>
 8be:	2b 81       	ldd	r18, Y+3	; 0x03
 8c0:	3c 81       	ldd	r19, Y+4	; 0x04
 8c2:	22 30       	cpi	r18, 0x02	; 2
 8c4:	31 05       	cpc	r19, r1
 8c6:	2c f4       	brge	.+10     	; 0x8d2 <GPIO_writePort+0x3e>
 8c8:	8b 81       	ldd	r24, Y+3	; 0x03
 8ca:	9c 81       	ldd	r25, Y+4	; 0x04
 8cc:	00 97       	sbiw	r24, 0x00	; 0
 8ce:	61 f0       	breq	.+24     	; 0x8e8 <GPIO_writePort+0x54>
 8d0:	1e c0       	rjmp	.+60     	; 0x90e <GPIO_writePort+0x7a>
 8d2:	2b 81       	ldd	r18, Y+3	; 0x03
 8d4:	3c 81       	ldd	r19, Y+4	; 0x04
 8d6:	22 30       	cpi	r18, 0x02	; 2
 8d8:	31 05       	cpc	r19, r1
 8da:	81 f0       	breq	.+32     	; 0x8fc <GPIO_writePort+0x68>
 8dc:	8b 81       	ldd	r24, Y+3	; 0x03
 8de:	9c 81       	ldd	r25, Y+4	; 0x04
 8e0:	83 30       	cpi	r24, 0x03	; 3
 8e2:	91 05       	cpc	r25, r1
 8e4:	81 f0       	breq	.+32     	; 0x906 <GPIO_writePort+0x72>
 8e6:	13 c0       	rjmp	.+38     	; 0x90e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
 8e8:	eb e3       	ldi	r30, 0x3B	; 59
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	8a 81       	ldd	r24, Y+2	; 0x02
 8ee:	80 83       	st	Z, r24
 8f0:	0e c0       	rjmp	.+28     	; 0x90e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
 8f2:	e8 e3       	ldi	r30, 0x38	; 56
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	8a 81       	ldd	r24, Y+2	; 0x02
 8f8:	80 83       	st	Z, r24
 8fa:	09 c0       	rjmp	.+18     	; 0x90e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
 8fc:	e5 e3       	ldi	r30, 0x35	; 53
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	8a 81       	ldd	r24, Y+2	; 0x02
 902:	80 83       	st	Z, r24
 904:	04 c0       	rjmp	.+8      	; 0x90e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
 906:	e2 e3       	ldi	r30, 0x32	; 50
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	8a 81       	ldd	r24, Y+2	; 0x02
 90c:	80 83       	st	Z, r24
			break;
		}
	}
}
 90e:	0f 90       	pop	r0
 910:	0f 90       	pop	r0
 912:	0f 90       	pop	r0
 914:	0f 90       	pop	r0
 916:	cf 91       	pop	r28
 918:	df 91       	pop	r29
 91a:	08 95       	ret

0000091c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
 91c:	df 93       	push	r29
 91e:	cf 93       	push	r28
 920:	00 d0       	rcall	.+0      	; 0x922 <GPIO_readPort+0x6>
 922:	00 d0       	rcall	.+0      	; 0x924 <GPIO_readPort+0x8>
 924:	cd b7       	in	r28, 0x3d	; 61
 926:	de b7       	in	r29, 0x3e	; 62
 928:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
 92a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 92c:	8a 81       	ldd	r24, Y+2	; 0x02
 92e:	84 30       	cpi	r24, 0x04	; 4
 930:	90 f5       	brcc	.+100    	; 0x996 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
 932:	8a 81       	ldd	r24, Y+2	; 0x02
 934:	28 2f       	mov	r18, r24
 936:	30 e0       	ldi	r19, 0x00	; 0
 938:	3c 83       	std	Y+4, r19	; 0x04
 93a:	2b 83       	std	Y+3, r18	; 0x03
 93c:	8b 81       	ldd	r24, Y+3	; 0x03
 93e:	9c 81       	ldd	r25, Y+4	; 0x04
 940:	81 30       	cpi	r24, 0x01	; 1
 942:	91 05       	cpc	r25, r1
 944:	d1 f0       	breq	.+52     	; 0x97a <GPIO_readPort+0x5e>
 946:	2b 81       	ldd	r18, Y+3	; 0x03
 948:	3c 81       	ldd	r19, Y+4	; 0x04
 94a:	22 30       	cpi	r18, 0x02	; 2
 94c:	31 05       	cpc	r19, r1
 94e:	2c f4       	brge	.+10     	; 0x95a <GPIO_readPort+0x3e>
 950:	8b 81       	ldd	r24, Y+3	; 0x03
 952:	9c 81       	ldd	r25, Y+4	; 0x04
 954:	00 97       	sbiw	r24, 0x00	; 0
 956:	61 f0       	breq	.+24     	; 0x970 <GPIO_readPort+0x54>
 958:	1e c0       	rjmp	.+60     	; 0x996 <GPIO_readPort+0x7a>
 95a:	2b 81       	ldd	r18, Y+3	; 0x03
 95c:	3c 81       	ldd	r19, Y+4	; 0x04
 95e:	22 30       	cpi	r18, 0x02	; 2
 960:	31 05       	cpc	r19, r1
 962:	81 f0       	breq	.+32     	; 0x984 <GPIO_readPort+0x68>
 964:	8b 81       	ldd	r24, Y+3	; 0x03
 966:	9c 81       	ldd	r25, Y+4	; 0x04
 968:	83 30       	cpi	r24, 0x03	; 3
 96a:	91 05       	cpc	r25, r1
 96c:	81 f0       	breq	.+32     	; 0x98e <GPIO_readPort+0x72>
 96e:	13 c0       	rjmp	.+38     	; 0x996 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
 970:	e9 e3       	ldi	r30, 0x39	; 57
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	80 81       	ld	r24, Z
 976:	89 83       	std	Y+1, r24	; 0x01
 978:	0e c0       	rjmp	.+28     	; 0x996 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
 97a:	e6 e3       	ldi	r30, 0x36	; 54
 97c:	f0 e0       	ldi	r31, 0x00	; 0
 97e:	80 81       	ld	r24, Z
 980:	89 83       	std	Y+1, r24	; 0x01
 982:	09 c0       	rjmp	.+18     	; 0x996 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
 984:	e3 e3       	ldi	r30, 0x33	; 51
 986:	f0 e0       	ldi	r31, 0x00	; 0
 988:	80 81       	ld	r24, Z
 98a:	89 83       	std	Y+1, r24	; 0x01
 98c:	04 c0       	rjmp	.+8      	; 0x996 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
 98e:	e0 e3       	ldi	r30, 0x30	; 48
 990:	f0 e0       	ldi	r31, 0x00	; 0
 992:	80 81       	ld	r24, Z
 994:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
 996:	89 81       	ldd	r24, Y+1	; 0x01
}
 998:	0f 90       	pop	r0
 99a:	0f 90       	pop	r0
 99c:	0f 90       	pop	r0
 99e:	0f 90       	pop	r0
 9a0:	cf 91       	pop	r28
 9a2:	df 91       	pop	r29
 9a4:	08 95       	ret

000009a6 <application>:
void carsWillMove(void);
/****************************global variables**************************************************/
unsigned int g_tickCounter=0;
unsigned char g_button_pressed=0;
/****************************functions definitions**************************************************/
void application(void){
 9a6:	df 93       	push	r29
 9a8:	cf 93       	push	r28
 9aa:	cd b7       	in	r28, 0x3d	; 61
 9ac:	de b7       	in	r29, 0x3e	; 62
initializeSystem();
 9ae:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <initializeSystem>
while(1){
carsNormalMode();
 9b2:	0e 94 5b 05 	call	0xab6	; 0xab6 <carsNormalMode>
 9b6:	fd cf       	rjmp	.-6      	; 0x9b2 <application+0xc>

000009b8 <initializeSystem>:
}
}
void initializeSystem(void){
 9b8:	df 93       	push	r29
 9ba:	cf 93       	push	r28
 9bc:	00 d0       	rcall	.+0      	; 0x9be <initializeSystem+0x6>
 9be:	00 d0       	rcall	.+0      	; 0x9c0 <initializeSystem+0x8>
 9c0:	00 d0       	rcall	.+0      	; 0x9c2 <initializeSystem+0xa>
 9c2:	cd b7       	in	r28, 0x3d	; 61
 9c4:	de b7       	in	r29, 0x3e	; 62
/*initialization of bush button*/
	PUSHBUTTON_init(PUSHBUTTON_RISING);
 9c6:	83 e0       	ldi	r24, 0x03	; 3
 9c8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <PUSHBUTTON_init>
	PUSHBUTTON_setISR(pushButtonFunction);
 9cc:	81 e4       	ldi	r24, 0x41	; 65
 9ce:	95 e0       	ldi	r25, 0x05	; 5
 9d0:	0e 94 83 01 	call	0x306	; 0x306 <PUSHBUTTON_setISR>
/*initialization of LEDS and turning them off*/
	GPIO_setupPinDirection(carsPort, carsGreenPin, PIN_OUTPUT);
 9d4:	80 e0       	ldi	r24, 0x00	; 0
 9d6:	60 e0       	ldi	r22, 0x00	; 0
 9d8:	41 e0       	ldi	r20, 0x01	; 1
 9da:	0e 94 95 01 	call	0x32a	; 0x32a <GPIO_setupPinDirection>
	GPIO_writePin(carsPort, carsGreenPin, LOGIC_LOW);
 9de:	80 e0       	ldi	r24, 0x00	; 0
 9e0:	60 e0       	ldi	r22, 0x00	; 0
 9e2:	40 e0       	ldi	r20, 0x00	; 0
 9e4:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_setupPinDirection(carsPort,carsYellowPin, PIN_OUTPUT);
 9e8:	80 e0       	ldi	r24, 0x00	; 0
 9ea:	61 e0       	ldi	r22, 0x01	; 1
 9ec:	41 e0       	ldi	r20, 0x01	; 1
 9ee:	0e 94 95 01 	call	0x32a	; 0x32a <GPIO_setupPinDirection>
	GPIO_writePin(carsPort, carsYellowPin, LOGIC_LOW);
 9f2:	80 e0       	ldi	r24, 0x00	; 0
 9f4:	61 e0       	ldi	r22, 0x01	; 1
 9f6:	40 e0       	ldi	r20, 0x00	; 0
 9f8:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_setupPinDirection(carsPort,carsRedPin,PIN_OUTPUT);
 9fc:	80 e0       	ldi	r24, 0x00	; 0
 9fe:	62 e0       	ldi	r22, 0x02	; 2
 a00:	41 e0       	ldi	r20, 0x01	; 1
 a02:	0e 94 95 01 	call	0x32a	; 0x32a <GPIO_setupPinDirection>
	GPIO_writePin(carsPort, carsRedPin, LOGIC_LOW);
 a06:	80 e0       	ldi	r24, 0x00	; 0
 a08:	62 e0       	ldi	r22, 0x02	; 2
 a0a:	40 e0       	ldi	r20, 0x00	; 0
 a0c:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_setupPinDirection(pedestriansPort, pedestriansGreenPin, PIN_OUTPUT);
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	60 e0       	ldi	r22, 0x00	; 0
 a14:	41 e0       	ldi	r20, 0x01	; 1
 a16:	0e 94 95 01 	call	0x32a	; 0x32a <GPIO_setupPinDirection>
	GPIO_writePin(pedestriansPort, pedestriansGreenPin, LOGIC_LOW);
 a1a:	81 e0       	ldi	r24, 0x01	; 1
 a1c:	60 e0       	ldi	r22, 0x00	; 0
 a1e:	40 e0       	ldi	r20, 0x00	; 0
 a20:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_setupPinDirection(pedestriansPort, pedestriansYellowPin, PIN_OUTPUT);
 a24:	81 e0       	ldi	r24, 0x01	; 1
 a26:	61 e0       	ldi	r22, 0x01	; 1
 a28:	41 e0       	ldi	r20, 0x01	; 1
 a2a:	0e 94 95 01 	call	0x32a	; 0x32a <GPIO_setupPinDirection>
	GPIO_writePin(pedestriansPort, pedestriansYellowPin, LOGIC_LOW);
 a2e:	81 e0       	ldi	r24, 0x01	; 1
 a30:	61 e0       	ldi	r22, 0x01	; 1
 a32:	40 e0       	ldi	r20, 0x00	; 0
 a34:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_setupPinDirection(pedestriansPort, pedestriansRedPin, PIN_OUTPUT);
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	62 e0       	ldi	r22, 0x02	; 2
 a3c:	41 e0       	ldi	r20, 0x01	; 1
 a3e:	0e 94 95 01 	call	0x32a	; 0x32a <GPIO_setupPinDirection>
	GPIO_writePin(pedestriansPort, pedestriansRedPin, LOGIC_LOW);
 a42:	81 e0       	ldi	r24, 0x01	; 1
 a44:	62 e0       	ldi	r22, 0x02	; 2
 a46:	40 e0       	ldi	r20, 0x00	; 0
 a48:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
/*initializing timer*/
	{
		Timer1_ConfigType config;
		config.mode=Timer1_compareMode;
 a4c:	81 e0       	ldi	r24, 0x01	; 1
 a4e:	8e 83       	std	Y+6, r24	; 0x06
		config.initial_value=0;
 a50:	1a 82       	std	Y+2, r1	; 0x02
 a52:	19 82       	std	Y+1, r1	; 0x01
		/*this values will make timer fire every 0.5 second*/
		config.compare_value=15625/4;
 a54:	82 e4       	ldi	r24, 0x42	; 66
 a56:	9f e0       	ldi	r25, 0x0F	; 15
 a58:	9c 83       	std	Y+4, r25	; 0x04
 a5a:	8b 83       	std	Y+3, r24	; 0x03
		config.prescaler=Timer1_clk_1024_prescaler;
 a5c:	85 e0       	ldi	r24, 0x05	; 5
 a5e:	8d 83       	std	Y+5, r24	; 0x05
		Timer1_setCallBack(timerFunction);
 a60:	8b e4       	ldi	r24, 0x4B	; 75
 a62:	95 e0       	ldi	r25, 0x05	; 5
 a64:	0e 94 b1 00 	call	0x162	; 0x162 <Timer1_setCallBack>
		Timer1_init(&config);
 a68:	ce 01       	movw	r24, r28
 a6a:	01 96       	adiw	r24, 0x01	; 1
 a6c:	0e 94 3e 00 	call	0x7c	; 0x7c <Timer1_init>
	}
}
 a70:	26 96       	adiw	r28, 0x06	; 6
 a72:	0f b6       	in	r0, 0x3f	; 63
 a74:	f8 94       	cli
 a76:	de bf       	out	0x3e, r29	; 62
 a78:	0f be       	out	0x3f, r0	; 63
 a7a:	cd bf       	out	0x3d, r28	; 61
 a7c:	cf 91       	pop	r28
 a7e:	df 91       	pop	r29
 a80:	08 95       	ret

00000a82 <pushButtonFunction>:
void pushButtonFunction(void){
 a82:	df 93       	push	r29
 a84:	cf 93       	push	r28
 a86:	cd b7       	in	r28, 0x3d	; 61
 a88:	de b7       	in	r29, 0x3e	; 62
g_button_pressed=1;
 a8a:	81 e0       	ldi	r24, 0x01	; 1
 a8c:	80 93 66 00 	sts	0x0066, r24
}
 a90:	cf 91       	pop	r28
 a92:	df 91       	pop	r29
 a94:	08 95       	ret

00000a96 <timerFunction>:
void timerFunction(void){
 a96:	df 93       	push	r29
 a98:	cf 93       	push	r28
 a9a:	cd b7       	in	r28, 0x3d	; 61
 a9c:	de b7       	in	r29, 0x3e	; 62
g_tickCounter++;
 a9e:	80 91 64 00 	lds	r24, 0x0064
 aa2:	90 91 65 00 	lds	r25, 0x0065
 aa6:	01 96       	adiw	r24, 0x01	; 1
 aa8:	90 93 65 00 	sts	0x0065, r25
 aac:	80 93 64 00 	sts	0x0064, r24
}
 ab0:	cf 91       	pop	r28
 ab2:	df 91       	pop	r29
 ab4:	08 95       	ret

00000ab6 <carsNormalMode>:
void carsNormalMode(void){
 ab6:	df 93       	push	r29
 ab8:	cf 93       	push	r28
 aba:	cd b7       	in	r28, 0x3d	; 61
 abc:	de b7       	in	r29, 0x3e	; 62
carsMove();
 abe:	0e 94 6a 05 	call	0xad4	; 0xad4 <carsMove>
carsWillStop();
 ac2:	0e 94 a1 05 	call	0xb42	; 0xb42 <carsWillStop>
carsStop();
 ac6:	0e 94 45 06 	call	0xc8a	; 0xc8a <carsStop>
carsWillMove();
 aca:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <carsWillMove>

}
 ace:	cf 91       	pop	r28
 ad0:	df 91       	pop	r29
 ad2:	08 95       	ret

00000ad4 <carsMove>:
void carsMove(void){
 ad4:	df 93       	push	r29
 ad6:	cf 93       	push	r28
 ad8:	cd b7       	in	r28, 0x3d	; 61
 ada:	de b7       	in	r29, 0x3e	; 62
	/*Cars move*/
	GPIO_writePin(carsPort, carsGreenPin, LOGIC_HIGH);
 adc:	80 e0       	ldi	r24, 0x00	; 0
 ade:	60 e0       	ldi	r22, 0x00	; 0
 ae0:	41 e0       	ldi	r20, 0x01	; 1
 ae2:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_writePin(carsPort, carsYellowPin, LOGIC_LOW);
 ae6:	80 e0       	ldi	r24, 0x00	; 0
 ae8:	61 e0       	ldi	r22, 0x01	; 1
 aea:	40 e0       	ldi	r20, 0x00	; 0
 aec:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_writePin(carsPort, carsRedPin, LOGIC_LOW);
 af0:	80 e0       	ldi	r24, 0x00	; 0
 af2:	62 e0       	ldi	r22, 0x02	; 2
 af4:	40 e0       	ldi	r20, 0x00	; 0
 af6:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	/*pedestrian stop*/
	GPIO_writePin(pedestriansPort, pedestriansGreenPin, LOGIC_LOW);
 afa:	81 e0       	ldi	r24, 0x01	; 1
 afc:	60 e0       	ldi	r22, 0x00	; 0
 afe:	40 e0       	ldi	r20, 0x00	; 0
 b00:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_writePin(pedestriansPort, pedestriansYellowPin, LOGIC_LOW);
 b04:	81 e0       	ldi	r24, 0x01	; 1
 b06:	61 e0       	ldi	r22, 0x01	; 1
 b08:	40 e0       	ldi	r20, 0x00	; 0
 b0a:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_writePin(pedestriansPort, pedestriansRedPin, LOGIC_HIGH);
 b0e:	81 e0       	ldi	r24, 0x01	; 1
 b10:	62 e0       	ldi	r22, 0x02	; 2
 b12:	41 e0       	ldi	r20, 0x01	; 1
 b14:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
 b18:	04 c0       	rjmp	.+8      	; 0xb22 <carsMove+0x4e>
	while(g_tickCounter<10){
		if(g_button_pressed==1)
 b1a:	80 91 66 00 	lds	r24, 0x0066
 b1e:	81 30       	cpi	r24, 0x01	; 1
 b20:	69 f0       	breq	.+26     	; 0xb3c <carsMove+0x68>
	GPIO_writePin(carsPort, carsRedPin, LOGIC_LOW);
	/*pedestrian stop*/
	GPIO_writePin(pedestriansPort, pedestriansGreenPin, LOGIC_LOW);
	GPIO_writePin(pedestriansPort, pedestriansYellowPin, LOGIC_LOW);
	GPIO_writePin(pedestriansPort, pedestriansRedPin, LOGIC_HIGH);
	while(g_tickCounter<10){
 b22:	80 91 64 00 	lds	r24, 0x0064
 b26:	90 91 65 00 	lds	r25, 0x0065
 b2a:	8a 30       	cpi	r24, 0x0A	; 10
 b2c:	91 05       	cpc	r25, r1
 b2e:	a8 f3       	brcs	.-22     	; 0xb1a <carsMove+0x46>
		if(g_button_pressed==1)
			return;
	}
	g_tickCounter=0;
 b30:	10 92 65 00 	sts	0x0065, r1
 b34:	10 92 64 00 	sts	0x0064, r1
	g_button_pressed=0;
 b38:	10 92 66 00 	sts	0x0066, r1
}
 b3c:	cf 91       	pop	r28
 b3e:	df 91       	pop	r29
 b40:	08 95       	ret

00000b42 <carsWillStop>:
void carsWillStop(void){
 b42:	df 93       	push	r29
 b44:	cf 93       	push	r28
 b46:	cd b7       	in	r28, 0x3d	; 61
 b48:	de b7       	in	r29, 0x3e	; 62
	/*Cars will stop*/
	GPIO_writePin(carsPort, carsGreenPin, LOGIC_LOW);
 b4a:	80 e0       	ldi	r24, 0x00	; 0
 b4c:	60 e0       	ldi	r22, 0x00	; 0
 b4e:	40 e0       	ldi	r20, 0x00	; 0
 b50:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_writePin(carsPort, carsYellowPin, LOGIC_HIGH);
 b54:	80 e0       	ldi	r24, 0x00	; 0
 b56:	61 e0       	ldi	r22, 0x01	; 1
 b58:	41 e0       	ldi	r20, 0x01	; 1
 b5a:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_writePin(carsPort, carsRedPin, LOGIC_LOW);
 b5e:	80 e0       	ldi	r24, 0x00	; 0
 b60:	62 e0       	ldi	r22, 0x02	; 2
 b62:	40 e0       	ldi	r20, 0x00	; 0
 b64:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	/*pedestrian will move*/
	GPIO_writePin(pedestriansPort, pedestriansGreenPin, LOGIC_LOW);
 b68:	81 e0       	ldi	r24, 0x01	; 1
 b6a:	60 e0       	ldi	r22, 0x00	; 0
 b6c:	40 e0       	ldi	r20, 0x00	; 0
 b6e:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_writePin(pedestriansPort, pedestriansYellowPin, LOGIC_HIGH);
 b72:	81 e0       	ldi	r24, 0x01	; 1
 b74:	61 e0       	ldi	r22, 0x01	; 1
 b76:	41 e0       	ldi	r20, 0x01	; 1
 b78:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_writePin(pedestriansPort, pedestriansRedPin, LOGIC_HIGH);
 b7c:	81 e0       	ldi	r24, 0x01	; 1
 b7e:	62 e0       	ldi	r22, 0x02	; 2
 b80:	41 e0       	ldi	r20, 0x01	; 1
 b82:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
 b86:	1d c0       	rjmp	.+58     	; 0xbc2 <carsWillStop+0x80>
	while(g_tickCounter<10){
		if(g_tickCounter%2)
 b88:	80 91 64 00 	lds	r24, 0x0064
 b8c:	90 91 65 00 	lds	r25, 0x0065
 b90:	81 70       	andi	r24, 0x01	; 1
 b92:	90 70       	andi	r25, 0x00	; 0
 b94:	88 23       	and	r24, r24
 b96:	59 f0       	breq	.+22     	; 0xbae <carsWillStop+0x6c>
		{
			GPIO_writePin(carsPort, carsYellowPin, LOGIC_HIGH);
 b98:	80 e0       	ldi	r24, 0x00	; 0
 b9a:	61 e0       	ldi	r22, 0x01	; 1
 b9c:	41 e0       	ldi	r20, 0x01	; 1
 b9e:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
			GPIO_writePin(pedestriansPort, pedestriansYellowPin, LOGIC_HIGH);
 ba2:	81 e0       	ldi	r24, 0x01	; 1
 ba4:	61 e0       	ldi	r22, 0x01	; 1
 ba6:	41 e0       	ldi	r20, 0x01	; 1
 ba8:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
 bac:	0a c0       	rjmp	.+20     	; 0xbc2 <carsWillStop+0x80>
		}else
		{
		GPIO_writePin(carsPort, carsYellowPin, LOGIC_LOW);
 bae:	80 e0       	ldi	r24, 0x00	; 0
 bb0:	61 e0       	ldi	r22, 0x01	; 1
 bb2:	40 e0       	ldi	r20, 0x00	; 0
 bb4:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
		GPIO_writePin(pedestriansPort, pedestriansYellowPin, LOGIC_LOW);
 bb8:	81 e0       	ldi	r24, 0x01	; 1
 bba:	61 e0       	ldi	r22, 0x01	; 1
 bbc:	40 e0       	ldi	r20, 0x00	; 0
 bbe:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_writePin(carsPort, carsRedPin, LOGIC_LOW);
	/*pedestrian will move*/
	GPIO_writePin(pedestriansPort, pedestriansGreenPin, LOGIC_LOW);
	GPIO_writePin(pedestriansPort, pedestriansYellowPin, LOGIC_HIGH);
	GPIO_writePin(pedestriansPort, pedestriansRedPin, LOGIC_HIGH);
	while(g_tickCounter<10){
 bc2:	80 91 64 00 	lds	r24, 0x0064
 bc6:	90 91 65 00 	lds	r25, 0x0065
 bca:	8a 30       	cpi	r24, 0x0A	; 10
 bcc:	91 05       	cpc	r25, r1
 bce:	e0 f2       	brcs	.-72     	; 0xb88 <carsWillStop+0x46>
		{
		GPIO_writePin(carsPort, carsYellowPin, LOGIC_LOW);
		GPIO_writePin(pedestriansPort, pedestriansYellowPin, LOGIC_LOW);
		}
	}
	g_button_pressed=0;
 bd0:	10 92 66 00 	sts	0x0066, r1
	g_tickCounter=0;
 bd4:	10 92 65 00 	sts	0x0065, r1
 bd8:	10 92 64 00 	sts	0x0064, r1
}
 bdc:	cf 91       	pop	r28
 bde:	df 91       	pop	r29
 be0:	08 95       	ret

00000be2 <carsWillMove>:
void carsWillMove(void){
 be2:	df 93       	push	r29
 be4:	cf 93       	push	r28
 be6:	cd b7       	in	r28, 0x3d	; 61
 be8:	de b7       	in	r29, 0x3e	; 62
	/*Cars will stop*/
	GPIO_writePin(carsPort, carsGreenPin, LOGIC_LOW);
 bea:	80 e0       	ldi	r24, 0x00	; 0
 bec:	60 e0       	ldi	r22, 0x00	; 0
 bee:	40 e0       	ldi	r20, 0x00	; 0
 bf0:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_writePin(carsPort, carsYellowPin, LOGIC_HIGH);
 bf4:	80 e0       	ldi	r24, 0x00	; 0
 bf6:	61 e0       	ldi	r22, 0x01	; 1
 bf8:	41 e0       	ldi	r20, 0x01	; 1
 bfa:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_writePin(carsPort, carsRedPin, LOGIC_LOW);
 bfe:	80 e0       	ldi	r24, 0x00	; 0
 c00:	62 e0       	ldi	r22, 0x02	; 2
 c02:	40 e0       	ldi	r20, 0x00	; 0
 c04:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	/*pedestrian will move*/
	GPIO_writePin(pedestriansPort, pedestriansGreenPin, LOGIC_HIGH);
 c08:	81 e0       	ldi	r24, 0x01	; 1
 c0a:	60 e0       	ldi	r22, 0x00	; 0
 c0c:	41 e0       	ldi	r20, 0x01	; 1
 c0e:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_writePin(pedestriansPort, pedestriansYellowPin, LOGIC_HIGH);
 c12:	81 e0       	ldi	r24, 0x01	; 1
 c14:	61 e0       	ldi	r22, 0x01	; 1
 c16:	41 e0       	ldi	r20, 0x01	; 1
 c18:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_writePin(pedestriansPort, pedestriansRedPin, LOGIC_LOW);
 c1c:	81 e0       	ldi	r24, 0x01	; 1
 c1e:	62 e0       	ldi	r22, 0x02	; 2
 c20:	40 e0       	ldi	r20, 0x00	; 0
 c22:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
 c26:	21 c0       	rjmp	.+66     	; 0xc6a <carsWillMove+0x88>
	while(g_tickCounter<10){
		if(g_tickCounter%2)
 c28:	80 91 64 00 	lds	r24, 0x0064
 c2c:	90 91 65 00 	lds	r25, 0x0065
 c30:	81 70       	andi	r24, 0x01	; 1
 c32:	90 70       	andi	r25, 0x00	; 0
 c34:	88 23       	and	r24, r24
 c36:	59 f0       	breq	.+22     	; 0xc4e <carsWillMove+0x6c>
		{
			GPIO_writePin(carsPort, carsYellowPin, LOGIC_HIGH);
 c38:	80 e0       	ldi	r24, 0x00	; 0
 c3a:	61 e0       	ldi	r22, 0x01	; 1
 c3c:	41 e0       	ldi	r20, 0x01	; 1
 c3e:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
			GPIO_writePin(pedestriansPort, pedestriansYellowPin, LOGIC_HIGH);
 c42:	81 e0       	ldi	r24, 0x01	; 1
 c44:	61 e0       	ldi	r22, 0x01	; 1
 c46:	41 e0       	ldi	r20, 0x01	; 1
 c48:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
 c4c:	0a c0       	rjmp	.+20     	; 0xc62 <carsWillMove+0x80>
		}else
		{
		GPIO_writePin(carsPort, carsYellowPin, LOGIC_LOW);
 c4e:	80 e0       	ldi	r24, 0x00	; 0
 c50:	61 e0       	ldi	r22, 0x01	; 1
 c52:	40 e0       	ldi	r20, 0x00	; 0
 c54:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
		GPIO_writePin(pedestriansPort, pedestriansYellowPin, LOGIC_LOW);
 c58:	81 e0       	ldi	r24, 0x01	; 1
 c5a:	61 e0       	ldi	r22, 0x01	; 1
 c5c:	40 e0       	ldi	r20, 0x00	; 0
 c5e:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
		}
		if(g_button_pressed==1)
 c62:	80 91 66 00 	lds	r24, 0x0066
 c66:	81 30       	cpi	r24, 0x01	; 1
 c68:	69 f0       	breq	.+26     	; 0xc84 <carsWillMove+0xa2>
	GPIO_writePin(carsPort, carsRedPin, LOGIC_LOW);
	/*pedestrian will move*/
	GPIO_writePin(pedestriansPort, pedestriansGreenPin, LOGIC_HIGH);
	GPIO_writePin(pedestriansPort, pedestriansYellowPin, LOGIC_HIGH);
	GPIO_writePin(pedestriansPort, pedestriansRedPin, LOGIC_LOW);
	while(g_tickCounter<10){
 c6a:	80 91 64 00 	lds	r24, 0x0064
 c6e:	90 91 65 00 	lds	r25, 0x0065
 c72:	8a 30       	cpi	r24, 0x0A	; 10
 c74:	91 05       	cpc	r25, r1
 c76:	c0 f2       	brcs	.-80     	; 0xc28 <carsWillMove+0x46>
		GPIO_writePin(pedestriansPort, pedestriansYellowPin, LOGIC_LOW);
		}
		if(g_button_pressed==1)
			return;
	}
	g_button_pressed=0;
 c78:	10 92 66 00 	sts	0x0066, r1
	g_tickCounter=0;
 c7c:	10 92 65 00 	sts	0x0065, r1
 c80:	10 92 64 00 	sts	0x0064, r1
}
 c84:	cf 91       	pop	r28
 c86:	df 91       	pop	r29
 c88:	08 95       	ret

00000c8a <carsStop>:
void carsStop(void){
 c8a:	df 93       	push	r29
 c8c:	cf 93       	push	r28
 c8e:	cd b7       	in	r28, 0x3d	; 61
 c90:	de b7       	in	r29, 0x3e	; 62
	/*Cars stop*/
	GPIO_writePin(carsPort, carsGreenPin, LOGIC_LOW);
 c92:	80 e0       	ldi	r24, 0x00	; 0
 c94:	60 e0       	ldi	r22, 0x00	; 0
 c96:	40 e0       	ldi	r20, 0x00	; 0
 c98:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_writePin(carsPort, carsYellowPin, LOGIC_LOW);
 c9c:	80 e0       	ldi	r24, 0x00	; 0
 c9e:	61 e0       	ldi	r22, 0x01	; 1
 ca0:	40 e0       	ldi	r20, 0x00	; 0
 ca2:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_writePin(carsPort, carsRedPin, LOGIC_HIGH);
 ca6:	80 e0       	ldi	r24, 0x00	; 0
 ca8:	62 e0       	ldi	r22, 0x02	; 2
 caa:	41 e0       	ldi	r20, 0x01	; 1
 cac:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	/*pedestrian cross*/
	GPIO_writePin(pedestriansPort, pedestriansGreenPin, LOGIC_HIGH);
 cb0:	81 e0       	ldi	r24, 0x01	; 1
 cb2:	60 e0       	ldi	r22, 0x00	; 0
 cb4:	41 e0       	ldi	r20, 0x01	; 1
 cb6:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_writePin(pedestriansPort, pedestriansYellowPin, LOGIC_LOW);
 cba:	81 e0       	ldi	r24, 0x01	; 1
 cbc:	61 e0       	ldi	r22, 0x01	; 1
 cbe:	40 e0       	ldi	r20, 0x00	; 0
 cc0:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	GPIO_writePin(pedestriansPort, pedestriansRedPin, LOGIC_LOW);
 cc4:	81 e0       	ldi	r24, 0x01	; 1
 cc6:	62 e0       	ldi	r22, 0x02	; 2
 cc8:	40 e0       	ldi	r20, 0x00	; 0
 cca:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_writePin>
	/*no action will be taken if button pressed pedestrians was just crossing*/
	while(g_tickCounter<10){}
 cce:	80 91 64 00 	lds	r24, 0x0064
 cd2:	90 91 65 00 	lds	r25, 0x0065
 cd6:	8a 30       	cpi	r24, 0x0A	; 10
 cd8:	91 05       	cpc	r25, r1
 cda:	c8 f3       	brcs	.-14     	; 0xcce <carsStop+0x44>
	g_button_pressed=0;
 cdc:	10 92 66 00 	sts	0x0066, r1
	g_tickCounter=0;
 ce0:	10 92 65 00 	sts	0x0065, r1
 ce4:	10 92 64 00 	sts	0x0064, r1
}
 ce8:	cf 91       	pop	r28
 cea:	df 91       	pop	r29
 cec:	08 95       	ret

00000cee <main>:
#include "application/app.h"
int main(){
 cee:	df 93       	push	r29
 cf0:	cf 93       	push	r28
 cf2:	cd b7       	in	r28, 0x3d	; 61
 cf4:	de b7       	in	r29, 0x3e	; 62
	application();
 cf6:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <application>
 cfa:	80 e0       	ldi	r24, 0x00	; 0
 cfc:	90 e0       	ldi	r25, 0x00	; 0
}
 cfe:	cf 91       	pop	r28
 d00:	df 91       	pop	r29
 d02:	08 95       	ret

00000d04 <_exit>:
 d04:	f8 94       	cli

00000d06 <__stop_program>:
 d06:	ff cf       	rjmp	.-2      	; 0xd06 <__stop_program>
